
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000192  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000192  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ba8  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000844  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c4  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001a94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000536  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d6  00000000  00000000  00002042  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002218  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e9       	ldi	r30, 0x92	; 146
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
{

	GPIO_PORT port = PORT_D;
	unsigned char pin =  TX_pin;
	unsigned char type = OUTPUT_DIGITAL;
	GPIO_CONFIG(port,pin,type);
  96:	42 e0       	ldi	r20, 0x02	; 2
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_CONFIG>
	GPIO_PIN_WRITE(port,pin,OFF);
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	0e 94 91 00 	call	0x122	; 0x122 <GPIO_PIN_WRITE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	84 e3       	ldi	r24, 0x34	; 52
  ae:	9c e0       	ldi	r25, 0x0C	; 12
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x1a>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x24>
  ba:	00 00       	nop
   
    while (1) 
    {
		_delay_ms(250);
		GPIO_PIN_TOGGLE(port,pin);
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	0e 94 b3 00 	call	0x166	; 0x166 <GPIO_PIN_TOGGLE>
  c4:	f2 cf       	rjmp	.-28     	; 0xaa <main+0x14>

000000c6 <GPIO_CONFIG>:
		
		// TODO : Implementar retorno para funções de configuração
		
		// Evita que ao usuário escolher um numero maior de portas ou pinos cause algum problema 
		// de memória grave
		if (port >= MAX_NUM_OF_PORTS || pin>= MAX_NUM_OF_PORT_PINS){
  c6:	83 30       	cpi	r24, 0x03	; 3
  c8:	58 f5       	brcc	.+86     	; 0x120 <GPIO_CONFIG+0x5a>
  ca:	68 30       	cpi	r22, 0x08	; 8
  cc:	48 f5       	brcc	.+82     	; 0x120 <GPIO_CONFIG+0x5a>
		volatile GPIO_DATA_TYPE *pt_data;
		unsigned char set_bit_mask;
		unsigned char clr_bit_mask;
		
	
		set_bit_mask = GPIO_PIN_SET_MASK[pin];
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	fb 01       	movw	r30, r22
  d2:	e2 5f       	subi	r30, 0xF2	; 242
  d4:	fe 4f       	sbci	r31, 0xFE	; 254
  d6:	20 81       	ld	r18, Z
		clr_bit_mask = GPIO_PIN_CLR_MASK[pin];
  d8:	fb 01       	movw	r30, r22
  da:	ea 5f       	subi	r30, 0xFA	; 250
  dc:	fe 4f       	sbci	r31, 0xFE	; 254
  de:	90 81       	ld	r25, Z
		
		// Aponta para o endereço do PORTx
		pt_data = GPIO_DATA_LIST[port];
  e0:	e8 2f       	mov	r30, r24
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	e0 50       	subi	r30, 0x00	; 0
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	01 90       	ld	r0, Z+
  ee:	f0 81       	ld	r31, Z
  f0:	e0 2d       	mov	r30, r0
			
		// O usuario pode escolher ter um input com pullup, input sem pullup ou uma saida
		switch(type){
  f2:	41 30       	cpi	r20, 0x01	; 1
  f4:	59 f0       	breq	.+22     	; 0x10c <GPIO_CONFIG+0x46>
  f6:	18 f0       	brcs	.+6      	; 0xfe <GPIO_CONFIG+0x38>
  f8:	42 30       	cpi	r20, 0x02	; 2
  fa:	79 f0       	breq	.+30     	; 0x11a <GPIO_CONFIG+0x54>
  fc:	08 95       	ret
			case INPUT_DIGITAL_PULLUP:
				pt_data->DIRECION_REG.byte &= clr_bit_mask;
  fe:	81 81       	ldd	r24, Z+1	; 0x01
 100:	98 23       	and	r25, r24
 102:	91 83       	std	Z+1, r25	; 0x01
				pt_data->DATA_OUT_PULL_REG.byte |= set_bit_mask;
 104:	82 81       	ldd	r24, Z+2	; 0x02
 106:	28 2b       	or	r18, r24
 108:	22 83       	std	Z+2, r18	; 0x02
				break;
 10a:	08 95       	ret
			case INPUT_DIGITAL:
				pt_data->DIRECION_REG.byte &= clr_bit_mask; 
 10c:	81 81       	ldd	r24, Z+1	; 0x01
 10e:	89 23       	and	r24, r25
 110:	81 83       	std	Z+1, r24	; 0x01
				pt_data->DATA_OUT_PULL_REG.byte &= clr_bit_mask;
 112:	82 81       	ldd	r24, Z+2	; 0x02
 114:	98 23       	and	r25, r24
 116:	92 83       	std	Z+2, r25	; 0x02
				break;
 118:	08 95       	ret
			case OUTPUT_DIGITAL:
				pt_data->DIRECION_REG.byte |= set_bit_mask;
 11a:	81 81       	ldd	r24, Z+1	; 0x01
 11c:	28 2b       	or	r18, r24
 11e:	21 83       	std	Z+1, r18	; 0x01
 120:	08 95       	ret

00000122 <GPIO_PIN_WRITE>:
}


void GPIO_PIN_WRITE(GPIO_PORT port, unsigned char pin, GPIO_PIN_STATE state){
	volatile GPIO_DATA_TYPE *pt_data;
	pt_data =  GPIO_DATA_LIST[port];
 122:	e8 2f       	mov	r30, r24
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	ee 0f       	add	r30, r30
 128:	ff 1f       	adc	r31, r31
 12a:	e0 50       	subi	r30, 0x00	; 0
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	a0 81       	ld	r26, Z
 130:	b1 81       	ldd	r27, Z+1	; 0x01
	
	if (state == ON){
 132:	41 30       	cpi	r20, 0x01	; 1
 134:	61 f4       	brne	.+24     	; 0x14e <GPIO_PIN_WRITE+0x2c>
		pt_data->DATA_OUT_PULL_REG.byte |= GPIO_PIN_SET_MASK[pin]; 
 136:	12 96       	adiw	r26, 0x02	; 2
 138:	9c 91       	ld	r25, X
 13a:	12 97       	sbiw	r26, 0x02	; 2
 13c:	e6 2f       	mov	r30, r22
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	e2 5f       	subi	r30, 0xF2	; 242
 142:	fe 4f       	sbci	r31, 0xFE	; 254
 144:	80 81       	ld	r24, Z
 146:	89 2b       	or	r24, r25
 148:	12 96       	adiw	r26, 0x02	; 2
 14a:	8c 93       	st	X, r24
 14c:	08 95       	ret
	}
	else{
		pt_data->DATA_OUT_PULL_REG.byte &= GPIO_PIN_CLR_MASK[pin]; 
 14e:	12 96       	adiw	r26, 0x02	; 2
 150:	9c 91       	ld	r25, X
 152:	12 97       	sbiw	r26, 0x02	; 2
 154:	e6 2f       	mov	r30, r22
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	ea 5f       	subi	r30, 0xFA	; 250
 15a:	fe 4f       	sbci	r31, 0xFE	; 254
 15c:	80 81       	ld	r24, Z
 15e:	89 23       	and	r24, r25
 160:	12 96       	adiw	r26, 0x02	; 2
 162:	8c 93       	st	X, r24
 164:	08 95       	ret

00000166 <GPIO_PIN_TOGGLE>:
	}
	
}
void GPIO_PIN_TOGGLE(GPIO_PORT port, unsigned char pin){
	volatile GPIO_DATA_TYPE *pt_data;
	pt_data = GPIO_DATA_LIST[port];
 166:	e8 2f       	mov	r30, r24
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	ee 0f       	add	r30, r30
 16c:	ff 1f       	adc	r31, r31
 16e:	e0 50       	subi	r30, 0x00	; 0
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	a0 81       	ld	r26, Z
 174:	b1 81       	ldd	r27, Z+1	; 0x01
	
	// Se pegar o set_mask é fazer XOR com o pino que você quer, ex: 0b11111111 xor 0x1 = 0b11111110
	pt_data->DATA_OUT_PULL_REG.byte ^= GPIO_PIN_SET_MASK[pin];
 176:	12 96       	adiw	r26, 0x02	; 2
 178:	9c 91       	ld	r25, X
 17a:	12 97       	sbiw	r26, 0x02	; 2
 17c:	e6 2f       	mov	r30, r22
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	e2 5f       	subi	r30, 0xF2	; 242
 182:	fe 4f       	sbci	r31, 0xFE	; 254
 184:	80 81       	ld	r24, Z
 186:	89 27       	eor	r24, r25
 188:	12 96       	adiw	r26, 0x02	; 2
 18a:	8c 93       	st	X, r24
 18c:	08 95       	ret

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
