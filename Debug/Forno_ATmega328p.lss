
Forno_ATmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  0000030a  0000039e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800124  00800124  000003c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010f2  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac7  00000000  00000000  000015e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000638  00000000  00000000  000020ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  000026e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000709  00000000  00000000  00002828  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003cf  00000000  00000000  00002f31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003300  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 94 00 	call	0x128	; 0x128 <main>
  9e:	0c 94 83 01 	jmp	0x306	; 0x306 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Appl__Initialize>:
//-------------------------------------- Public Functions -------------------------------------------------------------
//=====================================================================================================================


void Appl__Initialize(void){
	Hal__Initialize();
  a6:	0e 94 11 01 	call	0x222	; 0x222 <Hal__Initialize>
	Hal__SetAllLeds(APAGADO);	
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 40 01 	call	0x280	; 0x280 <Hal__SetAllLeds>
  b0:	08 95       	ret

000000b2 <Appl__Handler>:
}


void Appl__Handler(void){
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
	
	KEYS_READ* keys = Hal__ReadAllKey(); 
  b6:	0e 94 56 01 	call	0x2ac	; 0x2ac <Hal__ReadAllKey>
  ba:	ec 01       	movw	r28, r24
	
	if (keys->key[KEY_0] == SW_ON &&  keys->key[KEY_2] == SW_ON){
  bc:	88 81       	ld	r24, Y
  be:	81 11       	cpse	r24, r1
  c0:	07 c0       	rjmp	.+14     	; 0xd0 <Appl__Handler+0x1e>
  c2:	9a 81       	ldd	r25, Y+2	; 0x02
  c4:	91 11       	cpse	r25, r1
  c6:	04 c0       	rjmp	.+8      	; 0xd0 <Appl__Handler+0x1e>
		Hal__SetAllLeds(APAGADO);
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	0e 94 40 01 	call	0x280	; 0x280 <Hal__SetAllLeds>
  ce:	29 c0       	rjmp	.+82     	; 0x122 <Appl__Handler+0x70>
	}
	else{
		if (keys->key[KEY_0] == SW_ON ){
  d0:	81 11       	cpse	r24, r1
  d2:	07 c0       	rjmp	.+14     	; 0xe2 <Appl__Handler+0x30>
			Hal__SetAllLeds(APAGADO);
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 40 01 	call	0x280	; 0x280 <Hal__SetAllLeds>
			Hal__SetLed(LED_0,ACESO);
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	0e 94 34 01 	call	0x268	; 0x268 <Hal__SetLed>
		}
		if (keys->key[KEY_2] == SW_ON){
  e2:	8a 81       	ldd	r24, Y+2	; 0x02
  e4:	81 11       	cpse	r24, r1
  e6:	0f c0       	rjmp	.+30     	; 0x106 <Appl__Handler+0x54>
			Hal__SetAllLeds(APAGADO);
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	0e 94 40 01 	call	0x280	; 0x280 <Hal__SetAllLeds>
			Hal__SetLed(LED_0,ACESO);
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 34 01 	call	0x268	; 0x268 <Hal__SetLed>
			Hal__SetLed(LED_1,ACESO);
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	0e 94 34 01 	call	0x268	; 0x268 <Hal__SetLed>
			Hal__SetLed(LED_2,ACESO);
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	0e 94 34 01 	call	0x268	; 0x268 <Hal__SetLed>
		}
		if (keys->key[KEY_1] == SW_ON){
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	81 11       	cpse	r24, r1
 10a:	0b c0       	rjmp	.+22     	; 0x122 <Appl__Handler+0x70>
			Hal__SetAllLeds(APAGADO);
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 40 01 	call	0x280	; 0x280 <Hal__SetAllLeds>
			Hal__SetLed(LED_0,ACESO);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 34 01 	call	0x268	; 0x268 <Hal__SetLed>
			Hal__SetLed(LED_1,ACESO);
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 34 01 	call	0x268	; 0x268 <Hal__SetLed>
		}
	}
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <main>:
 128:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
 12c:	0e 94 53 00 	call	0xa6	; 0xa6 <Appl__Initialize>
 130:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 134:	88 23       	and	r24, r24
 136:	19 f0       	breq	.+6      	; 0x13e <main+0x16>
 138:	85 30       	cpi	r24, 0x05	; 5
 13a:	20 f4       	brcc	.+8      	; 0x144 <main+0x1c>
 13c:	05 c0       	rjmp	.+10     	; 0x148 <main+0x20>
 13e:	0e 94 59 00 	call	0xb2	; 0xb2 <Appl__Handler>
 142:	02 c0       	rjmp	.+4      	; 0x148 <main+0x20>
 144:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
 148:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
 152:	85 30       	cpi	r24, 0x05	; 5
 154:	68 f3       	brcs	.-38     	; 0x130 <main+0x8>
 156:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
 15a:	ea cf       	rjmp	.-44     	; 0x130 <main+0x8>

0000015c <GPIO_CONFIG>:
 15c:	83 30       	cpi	r24, 0x03	; 3
 15e:	58 f5       	brcc	.+86     	; 0x1b6 <GPIO_CONFIG+0x5a>
 160:	68 30       	cpi	r22, 0x08	; 8
 162:	48 f5       	brcc	.+82     	; 0x1b6 <GPIO_CONFIG+0x5a>
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	fb 01       	movw	r30, r22
 168:	e4 5e       	subi	r30, 0xE4	; 228
 16a:	fe 4f       	sbci	r31, 0xFE	; 254
 16c:	20 81       	ld	r18, Z
 16e:	fb 01       	movw	r30, r22
 170:	ec 5e       	subi	r30, 0xEC	; 236
 172:	fe 4f       	sbci	r31, 0xFE	; 254
 174:	90 81       	ld	r25, Z
 176:	e8 2f       	mov	r30, r24
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	ee 0f       	add	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	e0 50       	subi	r30, 0x00	; 0
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	01 90       	ld	r0, Z+
 184:	f0 81       	ld	r31, Z
 186:	e0 2d       	mov	r30, r0
 188:	41 30       	cpi	r20, 0x01	; 1
 18a:	59 f0       	breq	.+22     	; 0x1a2 <GPIO_CONFIG+0x46>
 18c:	18 f0       	brcs	.+6      	; 0x194 <GPIO_CONFIG+0x38>
 18e:	42 30       	cpi	r20, 0x02	; 2
 190:	79 f0       	breq	.+30     	; 0x1b0 <GPIO_CONFIG+0x54>
 192:	08 95       	ret
 194:	81 81       	ldd	r24, Z+1	; 0x01
 196:	98 23       	and	r25, r24
 198:	91 83       	std	Z+1, r25	; 0x01
 19a:	82 81       	ldd	r24, Z+2	; 0x02
 19c:	28 2b       	or	r18, r24
 19e:	22 83       	std	Z+2, r18	; 0x02
 1a0:	08 95       	ret
 1a2:	81 81       	ldd	r24, Z+1	; 0x01
 1a4:	89 23       	and	r24, r25
 1a6:	81 83       	std	Z+1, r24	; 0x01
 1a8:	82 81       	ldd	r24, Z+2	; 0x02
 1aa:	98 23       	and	r25, r24
 1ac:	92 83       	std	Z+2, r25	; 0x02
 1ae:	08 95       	ret
 1b0:	81 81       	ldd	r24, Z+1	; 0x01
 1b2:	28 2b       	or	r18, r24
 1b4:	21 83       	std	Z+1, r18	; 0x01
 1b6:	08 95       	ret

000001b8 <GPIO_PIN_WRITE>:
 1b8:	e8 2f       	mov	r30, r24
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	e0 50       	subi	r30, 0x00	; 0
 1c2:	ff 4f       	sbci	r31, 0xFF	; 255
 1c4:	a0 81       	ld	r26, Z
 1c6:	b1 81       	ldd	r27, Z+1	; 0x01
 1c8:	41 30       	cpi	r20, 0x01	; 1
 1ca:	61 f4       	brne	.+24     	; 0x1e4 <GPIO_PIN_WRITE+0x2c>
 1cc:	12 96       	adiw	r26, 0x02	; 2
 1ce:	9c 91       	ld	r25, X
 1d0:	12 97       	sbiw	r26, 0x02	; 2
 1d2:	e6 2f       	mov	r30, r22
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	e4 5e       	subi	r30, 0xE4	; 228
 1d8:	fe 4f       	sbci	r31, 0xFE	; 254
 1da:	80 81       	ld	r24, Z
 1dc:	89 2b       	or	r24, r25
 1de:	12 96       	adiw	r26, 0x02	; 2
 1e0:	8c 93       	st	X, r24
 1e2:	08 95       	ret
 1e4:	12 96       	adiw	r26, 0x02	; 2
 1e6:	9c 91       	ld	r25, X
 1e8:	12 97       	sbiw	r26, 0x02	; 2
 1ea:	e6 2f       	mov	r30, r22
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	ec 5e       	subi	r30, 0xEC	; 236
 1f0:	fe 4f       	sbci	r31, 0xFE	; 254
 1f2:	80 81       	ld	r24, Z
 1f4:	89 23       	and	r24, r25
 1f6:	12 96       	adiw	r26, 0x02	; 2
 1f8:	8c 93       	st	X, r24
 1fa:	08 95       	ret

000001fc <GPIO_PIN_READ>:
 1fc:	e8 2f       	mov	r30, r24
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	ee 0f       	add	r30, r30
 202:	ff 1f       	adc	r31, r31
 204:	e0 50       	subi	r30, 0x00	; 0
 206:	ff 4f       	sbci	r31, 0xFF	; 255
 208:	01 90       	ld	r0, Z+
 20a:	f0 81       	ld	r31, Z
 20c:	e0 2d       	mov	r30, r0
 20e:	90 81       	ld	r25, Z
 210:	e6 2f       	mov	r30, r22
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	e4 5e       	subi	r30, 0xE4	; 228
 216:	fe 4f       	sbci	r31, 0xFE	; 254
 218:	80 81       	ld	r24, Z
 21a:	89 23       	and	r24, r25
 21c:	09 f0       	breq	.+2      	; 0x220 <GPIO_PIN_READ+0x24>
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	08 95       	ret

00000222 <Hal__Initialize>:
unsigned char Hal__ReadKey(KEY_INPUT_TYPE key)
{
unsigned char value;
value = GPIO_PIN_READ(KEYS_GPIO[key].port, KEYS_GPIO[key].pin);
return (value);
}
 222:	cf 93       	push	r28
 224:	c0 e0       	ldi	r28, 0x00	; 0
 226:	0c c0       	rjmp	.+24     	; 0x240 <Hal__Initialize+0x1e>
 228:	ec 2f       	mov	r30, r28
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	ee 0f       	add	r30, r30
 22e:	ff 1f       	adc	r31, r31
 230:	e4 5f       	subi	r30, 0xF4	; 244
 232:	fe 4f       	sbci	r31, 0xFE	; 254
 234:	42 e0       	ldi	r20, 0x02	; 2
 236:	61 81       	ldd	r22, Z+1	; 0x01
 238:	80 81       	ld	r24, Z
 23a:	0e 94 ae 00 	call	0x15c	; 0x15c <GPIO_CONFIG>
 23e:	cf 5f       	subi	r28, 0xFF	; 255
 240:	c4 30       	cpi	r28, 0x04	; 4
 242:	90 f3       	brcs	.-28     	; 0x228 <Hal__Initialize+0x6>
 244:	c0 e0       	ldi	r28, 0x00	; 0
 246:	0c c0       	rjmp	.+24     	; 0x260 <Hal__Initialize+0x3e>
 248:	ec 2f       	mov	r30, r28
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	ee 0f       	add	r30, r30
 24e:	ff 1f       	adc	r31, r31
 250:	ea 5f       	subi	r30, 0xFA	; 250
 252:	fe 4f       	sbci	r31, 0xFE	; 254
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	61 81       	ldd	r22, Z+1	; 0x01
 258:	80 81       	ld	r24, Z
 25a:	0e 94 ae 00 	call	0x15c	; 0x15c <GPIO_CONFIG>
 25e:	cf 5f       	subi	r28, 0xFF	; 255
 260:	c3 30       	cpi	r28, 0x03	; 3
 262:	90 f3       	brcs	.-28     	; 0x248 <Hal__Initialize+0x26>
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <Hal__SetLed>:
 268:	46 2f       	mov	r20, r22
 26a:	e8 2f       	mov	r30, r24
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	ee 0f       	add	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	e4 5f       	subi	r30, 0xF4	; 244
 274:	fe 4f       	sbci	r31, 0xFE	; 254
 276:	61 81       	ldd	r22, Z+1	; 0x01
 278:	80 81       	ld	r24, Z
 27a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <GPIO_PIN_WRITE>
 27e:	08 95       	ret

00000280 <Hal__SetAllLeds>:
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	d8 2f       	mov	r29, r24
 286:	c0 e0       	ldi	r28, 0x00	; 0
 288:	0c c0       	rjmp	.+24     	; 0x2a2 <Hal__SetAllLeds+0x22>
 28a:	ec 2f       	mov	r30, r28
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	ee 0f       	add	r30, r30
 290:	ff 1f       	adc	r31, r31
 292:	e4 5f       	subi	r30, 0xF4	; 244
 294:	fe 4f       	sbci	r31, 0xFE	; 254
 296:	4d 2f       	mov	r20, r29
 298:	61 81       	ldd	r22, Z+1	; 0x01
 29a:	80 81       	ld	r24, Z
 29c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <GPIO_PIN_WRITE>
 2a0:	cf 5f       	subi	r28, 0xFF	; 255
 2a2:	c4 30       	cpi	r28, 0x04	; 4
 2a4:	90 f3       	brcs	.-28     	; 0x28a <Hal__SetAllLeds+0xa>
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <Hal__ReadAllKey>:
 *  Use this function to read the status of all keys
 *  *  return: retorno o ponteiro da estrutura com os vetores das chaves*/


KEYS_READ* Hal__ReadAllKey(void)
{
 2ac:	1f 93       	push	r17
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
	KEY_INPUT_TYPE index;
	for (index = 0; index < NUM_OF_KEYS; index++)
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	07 c0       	rjmp	.+14     	; 0x2c4 <Hal__ReadAllKey+0x18>
		tab.key[index] = 0xff;
 2b6:	e8 2f       	mov	r30, r24
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	eb 5d       	subi	r30, 0xDB	; 219
 2bc:	fe 4f       	sbci	r31, 0xFE	; 254
 2be:	9f ef       	ldi	r25, 0xFF	; 255
 2c0:	90 83       	st	Z, r25


KEYS_READ* Hal__ReadAllKey(void)
{
	KEY_INPUT_TYPE index;
	for (index = 0; index < NUM_OF_KEYS; index++)
 2c2:	8f 5f       	subi	r24, 0xFF	; 255
 2c4:	83 30       	cpi	r24, 0x03	; 3
 2c6:	b8 f3       	brcs	.-18     	; 0x2b6 <Hal__ReadAllKey+0xa>
 2c8:	10 e0       	ldi	r17, 0x00	; 0
 2ca:	15 c0       	rjmp	.+42     	; 0x2f6 <Hal__ReadAllKey+0x4a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2cc:	87 ea       	ldi	r24, 0xA7	; 167
 2ce:	91 e6       	ldi	r25, 0x61	; 97
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <Hal__ReadAllKey+0x24>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <Hal__ReadAllKey+0x2a>
 2d6:	00 00       	nop
		tab.key[index] = 0xff;
		
	
	for (index = 0; index < NUM_OF_KEYS; index++){
			_delay_ms(100);
			tab.key[index] = GPIO_PIN_READ(KEYS_GPIO[index].port, KEYS_GPIO[index].pin);
 2d8:	c1 2f       	mov	r28, r17
 2da:	d0 e0       	ldi	r29, 0x00	; 0
 2dc:	fe 01       	movw	r30, r28
 2de:	ee 0f       	add	r30, r30
 2e0:	ff 1f       	adc	r31, r31
 2e2:	ea 5f       	subi	r30, 0xFA	; 250
 2e4:	fe 4f       	sbci	r31, 0xFE	; 254
 2e6:	61 81       	ldd	r22, Z+1	; 0x01
 2e8:	80 81       	ld	r24, Z
 2ea:	0e 94 fe 00 	call	0x1fc	; 0x1fc <GPIO_PIN_READ>
 2ee:	cb 5d       	subi	r28, 0xDB	; 219
 2f0:	de 4f       	sbci	r29, 0xFE	; 254
 2f2:	88 83       	st	Y, r24
	KEY_INPUT_TYPE index;
	for (index = 0; index < NUM_OF_KEYS; index++)
		tab.key[index] = 0xff;
		
	
	for (index = 0; index < NUM_OF_KEYS; index++){
 2f4:	1f 5f       	subi	r17, 0xFF	; 255
 2f6:	13 30       	cpi	r17, 0x03	; 3
 2f8:	48 f3       	brcs	.-46     	; 0x2cc <Hal__ReadAllKey+0x20>
			_delay_ms(100);
			tab.key[index] = GPIO_PIN_READ(KEYS_GPIO[index].port, KEYS_GPIO[index].pin);
	}
	return (&tab);
 2fa:	85 e2       	ldi	r24, 0x25	; 37
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	08 95       	ret

00000306 <_exit>:
 306:	f8 94       	cli

00000308 <__stop_program>:
 308:	ff cf       	rjmp	.-2      	; 0x308 <__stop_program>
