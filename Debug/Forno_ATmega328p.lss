
Forno_ATmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  000005c0  00000654  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800142  00800142  00000696  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000696  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000197d  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf9  00000000  00000000  000021d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a1a  00000000  00000000  00002ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  000038e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b4  00000000  00000000  00003b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000058f  00000000  00000000  000044d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004a67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ec       	ldi	r30, 0xC0	; 192
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 35       	cpi	r26, 0x5A	; 90
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 75 00 	call	0xea	; 0xea <main>
  9e:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Appl__Initialize>:
//-------------------------------------- Public Functions -------------------------------------------------------------
//=====================================================================================================================


void Appl__Initialize(void){
	User_Action = EVENTS_NO_EVENT;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
  ac:	08 95       	ret

000000ae <Appl__Handler>:
}


void Appl__Handler(void)
{
	User_Action = Display__GetEvent(); 
  ae:	0e 94 be 02 	call	0x57c	; 0x57c <Display__GetEvent>
  b2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
	if (User_Action != EVENTS_NO_EVENT)
  b6:	8f 3f       	cpi	r24, 0xFF	; 255
  b8:	b9 f0       	breq	.+46     	; 0xe8 <Appl__Handler+0x3a>
	{
		switch(User_Action)
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	51 f0       	breq	.+20     	; 0xd2 <Appl__Handler+0x24>
  be:	28 f0       	brcs	.+10     	; 0xca <Appl__Handler+0x1c>
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	59 f0       	breq	.+22     	; 0xda <Appl__Handler+0x2c>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	69 f0       	breq	.+26     	; 0xe2 <Appl__Handler+0x34>
  c8:	08 95       	ret
		{
			case KEY_OFF_EVENT:
			Display__SetState(OVEN_OFF);
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Display__SetState>
			break;
  d0:	08 95       	ret
			
			case KEY_MIN_EVENT:
			Display__SetState(OVEN_MIN);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Display__SetState>
			break;
  d8:	08 95       	ret
			
			case KEY_MED_EVENT:
			Display__SetState(OVEN_MED);
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Display__SetState>
			break;
  e0:	08 95       	ret
			
			case KEY_MAX_EVENT:
			Display__SetState(OVEN_MAX);
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Display__SetState>
  e8:	08 95       	ret

000000ea <main>:
//=====================================================================================================================

void main(void)
{
	
	Slot = SLOT_1;
  ea:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <Slot>
	
	// Functions Initialization
	INITIALIZE_TASKS();
  ee:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Hal__Initialize>
  f2:	0e 94 65 02 	call	0x4ca	; 0x4ca <Display__Initialize>
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <Appl__Initialize>
	
	
	//Main Loop
	for(;;)
	{
		ALL_SLOTS_TASKS();
  fa:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Hal__FastHandler>
		switch(Slot){
  fe:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <Slot>
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	39 f0       	breq	.+14     	; 0x114 <main+0x2a>
 106:	18 f0       	brcs	.+6      	; 0x10e <main+0x24>
 108:	85 30       	cpi	r24, 0x05	; 5
 10a:	38 f4       	brcc	.+14     	; 0x11a <main+0x30>
 10c:	08 c0       	rjmp	.+16     	; 0x11e <main+0x34>
			
			case SLOT_1:
				SLOT_1_TASKS();
 10e:	0e 94 57 00 	call	0xae	; 0xae <Appl__Handler>
			break;
 112:	05 c0       	rjmp	.+10     	; 0x11e <main+0x34>

			case SLOT_2:
				SLOT_2_TASKS();
 114:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <Display__Handler>
			break;
 118:	02 c0       	rjmp	.+4      	; 0x11e <main+0x34>
			case SLOT_5:
				SLOT_5_TASKS();
			break;

			default:
				Slot = SLOT_1;
 11a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <Slot>
			break;

		}

		Slot++;
 11e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <Slot>
 122:	8f 5f       	subi	r24, 0xFF	; 255
 124:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <Slot>
		if(Slot >= NUM_OF_MAIN_SLOTS){
 128:	85 30       	cpi	r24, 0x05	; 5
 12a:	38 f3       	brcs	.-50     	; 0xfa <main+0x10>
			Slot = SLOT_1;
 12c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <Slot>
 130:	e4 cf       	rjmp	.-56     	; 0xfa <main+0x10>

00000132 <GPIO_CONFIG>:
void GPIO_PIN_TOGGLE(GPIO_PORT port, unsigned char pin){
	volatile GPIO_DATA_TYPE *pt_data;
	pt_data = GPIO_DATA_LIST[port];
	
	// Se pegar o set_mask é fazer XOR com o pino que você quer, ex: 0b11111111 xor 0x1 = 0b11111110
	pt_data->DATA_OUT_PULL_REG.byte ^= GPIO_PIN_SET_MASK[pin];
 132:	83 30       	cpi	r24, 0x03	; 3
 134:	58 f5       	brcc	.+86     	; 0x18c <GPIO_CONFIG+0x5a>
 136:	68 30       	cpi	r22, 0x08	; 8
 138:	48 f5       	brcc	.+82     	; 0x18c <GPIO_CONFIG+0x5a>
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	fb 01       	movw	r30, r22
 13e:	e2 5e       	subi	r30, 0xE2	; 226
 140:	fe 4f       	sbci	r31, 0xFE	; 254
 142:	20 81       	ld	r18, Z
 144:	fb 01       	movw	r30, r22
 146:	ea 5e       	subi	r30, 0xEA	; 234
 148:	fe 4f       	sbci	r31, 0xFE	; 254
 14a:	90 81       	ld	r25, Z
 14c:	e8 2f       	mov	r30, r24
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	ee 0f       	add	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	e0 50       	subi	r30, 0x00	; 0
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	01 90       	ld	r0, Z+
 15a:	f0 81       	ld	r31, Z
 15c:	e0 2d       	mov	r30, r0
 15e:	41 30       	cpi	r20, 0x01	; 1
 160:	59 f0       	breq	.+22     	; 0x178 <GPIO_CONFIG+0x46>
 162:	18 f0       	brcs	.+6      	; 0x16a <GPIO_CONFIG+0x38>
 164:	42 30       	cpi	r20, 0x02	; 2
 166:	79 f0       	breq	.+30     	; 0x186 <GPIO_CONFIG+0x54>
 168:	08 95       	ret
 16a:	81 81       	ldd	r24, Z+1	; 0x01
 16c:	98 23       	and	r25, r24
 16e:	91 83       	std	Z+1, r25	; 0x01
 170:	82 81       	ldd	r24, Z+2	; 0x02
 172:	28 2b       	or	r18, r24
 174:	22 83       	std	Z+2, r18	; 0x02
 176:	08 95       	ret
 178:	81 81       	ldd	r24, Z+1	; 0x01
 17a:	89 23       	and	r24, r25
 17c:	81 83       	std	Z+1, r24	; 0x01
 17e:	82 81       	ldd	r24, Z+2	; 0x02
 180:	98 23       	and	r25, r24
 182:	92 83       	std	Z+2, r25	; 0x02
 184:	08 95       	ret
 186:	81 81       	ldd	r24, Z+1	; 0x01
 188:	28 2b       	or	r18, r24
 18a:	21 83       	std	Z+1, r18	; 0x01
 18c:	08 95       	ret

0000018e <GPIO_PIN_WRITE>:
 18e:	e8 2f       	mov	r30, r24
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	ee 0f       	add	r30, r30
 194:	ff 1f       	adc	r31, r31
 196:	e0 50       	subi	r30, 0x00	; 0
 198:	ff 4f       	sbci	r31, 0xFF	; 255
 19a:	a0 81       	ld	r26, Z
 19c:	b1 81       	ldd	r27, Z+1	; 0x01
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	61 f4       	brne	.+24     	; 0x1ba <GPIO_PIN_WRITE+0x2c>
 1a2:	12 96       	adiw	r26, 0x02	; 2
 1a4:	9c 91       	ld	r25, X
 1a6:	12 97       	sbiw	r26, 0x02	; 2
 1a8:	e6 2f       	mov	r30, r22
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	e2 5e       	subi	r30, 0xE2	; 226
 1ae:	fe 4f       	sbci	r31, 0xFE	; 254
 1b0:	80 81       	ld	r24, Z
 1b2:	89 2b       	or	r24, r25
 1b4:	12 96       	adiw	r26, 0x02	; 2
 1b6:	8c 93       	st	X, r24
 1b8:	08 95       	ret
 1ba:	12 96       	adiw	r26, 0x02	; 2
 1bc:	9c 91       	ld	r25, X
 1be:	12 97       	sbiw	r26, 0x02	; 2
 1c0:	e6 2f       	mov	r30, r22
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	ea 5e       	subi	r30, 0xEA	; 234
 1c6:	fe 4f       	sbci	r31, 0xFE	; 254
 1c8:	80 81       	ld	r24, Z
 1ca:	89 23       	and	r24, r25
 1cc:	12 96       	adiw	r26, 0x02	; 2
 1ce:	8c 93       	st	X, r24
 1d0:	08 95       	ret

000001d2 <GPIO_PIN_READ>:
}

unsigned char GPIO_PIN_READ(GPIO_PORT port, unsigned char pin){
	volatile GPIO_DATA_TYPE *pt_data;
	pt_data = GPIO_DATA_LIST[port];
 1d2:	e8 2f       	mov	r30, r24
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	ee 0f       	add	r30, r30
 1d8:	ff 1f       	adc	r31, r31
 1da:	e0 50       	subi	r30, 0x00	; 0
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	01 90       	ld	r0, Z+
 1e0:	f0 81       	ld	r31, Z
 1e2:	e0 2d       	mov	r30, r0
	// AND dos dados de PINx com o pin_set_mask
	if(pt_data->DATA_IN_REG.byte & GPIO_PIN_SET_MASK[pin]){
 1e4:	90 81       	ld	r25, Z
 1e6:	e6 2f       	mov	r30, r22
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	e2 5e       	subi	r30, 0xE2	; 226
 1ec:	fe 4f       	sbci	r31, 0xFE	; 254
 1ee:	80 81       	ld	r24, Z
 1f0:	89 23       	and	r24, r25
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <GPIO_PIN_READ+0x24>
		return SET;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
	}
	return RESET;
 1f6:	08 95       	ret

000001f8 <Hal__Initialize>:
/*
 * Call this function on initialize tasks before use any function of this module
 * This function will properly configure all pins before use it
 */
void Hal__Initialize(void)
{
 1f8:	cf 93       	push	r28
	LED_OUTPUT_TYPE led_index;
	KEY_INPUT_TYPE key_index;
		
	
	// LEDs Configuration
	for(led_index = 0; led_index < NUM_OF_LEDS; led_index++)
 1fa:	c0 e0       	ldi	r28, 0x00	; 0
 1fc:	0c c0       	rjmp	.+24     	; 0x216 <Hal__Initialize+0x1e>
	{
		GPIO_CONFIG(LED_GPIO[led_index].port, LED_GPIO[led_index].pin, OUTPUT_DIGITAL);
 1fe:	ec 2f       	mov	r30, r28
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	ee 0f       	add	r30, r30
 204:	ff 1f       	adc	r31, r31
 206:	e2 5f       	subi	r30, 0xF2	; 242
 208:	fe 4f       	sbci	r31, 0xFE	; 254
 20a:	42 e0       	ldi	r20, 0x02	; 2
 20c:	61 81       	ldd	r22, Z+1	; 0x01
 20e:	80 81       	ld	r24, Z
 210:	0e 94 99 00 	call	0x132	; 0x132 <GPIO_CONFIG>
	LED_OUTPUT_TYPE led_index;
	KEY_INPUT_TYPE key_index;
		
	
	// LEDs Configuration
	for(led_index = 0; led_index < NUM_OF_LEDS; led_index++)
 214:	cf 5f       	subi	r28, 0xFF	; 255
 216:	c4 30       	cpi	r28, 0x04	; 4
 218:	90 f3       	brcs	.-28     	; 0x1fe <Hal__Initialize+0x6>
 21a:	c0 e0       	ldi	r28, 0x00	; 0
 21c:	0c c0       	rjmp	.+24     	; 0x236 <Hal__Initialize+0x3e>
	
	
	// Keys Configuration
	for(key_index = 0; key_index < NUM_OF_KEYS; key_index++)
	{
		GPIO_CONFIG(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin, INPUT_DIGITAL_PULLUP);
 21e:	ec 2f       	mov	r30, r28
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	ee 0f       	add	r30, r30
 224:	ff 1f       	adc	r31, r31
 226:	ea 5f       	subi	r30, 0xFA	; 250
 228:	fe 4f       	sbci	r31, 0xFE	; 254
 22a:	40 e0       	ldi	r20, 0x00	; 0
 22c:	61 81       	ldd	r22, Z+1	; 0x01
 22e:	80 81       	ld	r24, Z
 230:	0e 94 99 00 	call	0x132	; 0x132 <GPIO_CONFIG>
		GPIO_CONFIG(LED_GPIO[led_index].port, LED_GPIO[led_index].pin, OUTPUT_DIGITAL);
	}
	
	
	// Keys Configuration
	for(key_index = 0; key_index < NUM_OF_KEYS; key_index++)
 234:	cf 5f       	subi	r28, 0xFF	; 255
 236:	c4 30       	cpi	r28, 0x04	; 4
 238:	90 f3       	brcs	.-28     	; 0x21e <Hal__Initialize+0x26>
	{
		GPIO_CONFIG(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin, INPUT_DIGITAL_PULLUP);
	}
	
	// Configuration of 7 segment's
	GPIO_CONFIG(PORT_D,4,OUTPUT_DIGITAL);
 23a:	42 e0       	ldi	r20, 0x02	; 2
 23c:	64 e0       	ldi	r22, 0x04	; 4
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	0e 94 99 00 	call	0x132	; 0x132 <GPIO_CONFIG>
	GPIO_CONFIG(PORT_D,7,OUTPUT_DIGITAL);
 244:	42 e0       	ldi	r20, 0x02	; 2
 246:	67 e0       	ldi	r22, 0x07	; 7
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	0e 94 99 00 	call	0x132	; 0x132 <GPIO_CONFIG>
	GPIO_CONFIG(PORT_B,0,OUTPUT_DIGITAL);
 24e:	42 e0       	ldi	r20, 0x02	; 2
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 99 00 	call	0x132	; 0x132 <GPIO_CONFIG>
	
	
}
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <Hal__SetLed>:
 *  output: Respective LED
 *  value: ON/OFF
 */
void Hal__SetLed(LED_OUTPUT_TYPE output,unsigned char value)
{
	Hal_Leds_Buffer[output] = LED_OFF;
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	fc 01       	movw	r30, r24
 260:	e9 5b       	subi	r30, 0xB9	; 185
 262:	fe 4f       	sbci	r31, 0xFE	; 254
 264:	21 e0       	ldi	r18, 0x01	; 1
 266:	20 83       	st	Z, r18
	if (value == ACENDE_LED)
 268:	61 11       	cpse	r22, r1
 26a:	04 c0       	rjmp	.+8      	; 0x274 <Hal__SetLed+0x18>
		Hal_Leds_Buffer[output] = LED_ON;
 26c:	fc 01       	movw	r30, r24
 26e:	e9 5b       	subi	r30, 0xB9	; 185
 270:	fe 4f       	sbci	r31, 0xFE	; 254
 272:	10 82       	st	Z, r1
 274:	08 95       	ret

00000276 <Hal__SetAllLeds>:
 */
void Hal__SetAllLeds(unsigned char value)
{
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e c0       	rjmp	.+28     	; 0x296 <Hal__SetAllLeds+0x20>
	{
		Hal_Leds_Buffer[index] = LED_OFF;
 27a:	29 2f       	mov	r18, r25
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	f9 01       	movw	r30, r18
 280:	e9 5b       	subi	r30, 0xB9	; 185
 282:	fe 4f       	sbci	r31, 0xFE	; 254
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	40 83       	st	Z, r20
		if (value == ACENDE_LED)
 288:	81 11       	cpse	r24, r1
 28a:	04 c0       	rjmp	.+8      	; 0x294 <Hal__SetAllLeds+0x1e>
		Hal_Leds_Buffer[index] = LED_ON;
 28c:	f9 01       	movw	r30, r18
 28e:	e9 5b       	subi	r30, 0xB9	; 185
 290:	fe 4f       	sbci	r31, 0xFE	; 254
 292:	10 82       	st	Z, r1
 */
void Hal__SetAllLeds(unsigned char value)
{
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
 294:	9f 5f       	subi	r25, 0xFF	; 255
 296:	94 30       	cpi	r25, 0x04	; 4
 298:	80 f3       	brcs	.-32     	; 0x27a <Hal__SetAllLeds+0x4>
	{
		Hal_Leds_Buffer[index] = LED_OFF;
		if (value == ACENDE_LED)
		Hal_Leds_Buffer[index] = LED_ON;
	}
}
 29a:	08 95       	ret

0000029c <Hal__ReadKey>:
 *  Use this function to read the status of a specific key
 *  key: desired key to be read
 *  return: TRUE if key is pressed otherwise FALSE
 */
unsigned char Hal__ReadKey(KEY_INPUT_TYPE key)
{
 29c:	28 2f       	mov	r18, r24
	if (key < NUM_OF_KEYS)
 29e:	84 30       	cpi	r24, 0x04	; 4
 2a0:	80 f4       	brcc	.+32     	; 0x2c2 <Hal__ReadKey+0x26>
	{
		if (BIT_TEST(Hal_Keys_Buffer, key) > 0)
 2a2:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Hal_Keys_Buffer>
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	a0 e0       	ldi	r26, 0x00	; 0
 2aa:	b0 e0       	ldi	r27, 0x00	; 0
 2ac:	04 c0       	rjmp	.+8      	; 0x2b6 <Hal__ReadKey+0x1a>
 2ae:	b6 95       	lsr	r27
 2b0:	a7 95       	ror	r26
 2b2:	97 95       	ror	r25
 2b4:	87 95       	ror	r24
 2b6:	2a 95       	dec	r18
 2b8:	d2 f7       	brpl	.-12     	; 0x2ae <Hal__ReadKey+0x12>
 2ba:	80 fd       	sbrc	r24, 0
 2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <Hal__ReadKey+0x2a>
		return (TRUE);
	}
	return (FALSE);
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	08 95       	ret
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	08 95       	ret
unsigned char Hal__ReadKey(KEY_INPUT_TYPE key)
{
	if (key < NUM_OF_KEYS)
	{
		if (BIT_TEST(Hal_Keys_Buffer, key) > 0)
		return (TRUE);
 2c6:	81 e0       	ldi	r24, 0x01	; 1
	}
	return (FALSE);
}
 2c8:	08 95       	ret

000002ca <Hal__ReadAllKey>:
 *  Use this function to read the status of all keys
 *  *  return: retorno o ponteiro da estrutura com os vetores das chaves*/


unsigned char Hal__ReadAllKey(void)
{
 2ca:	0f 93       	push	r16
 2cc:	1f 93       	push	r17
 2ce:	cf 93       	push	r28
	KEY_INPUT_TYPE index;
	for(index = 0; index < NUM_OF_KEYS; index++)
 2d0:	c0 e0       	ldi	r28, 0x00	; 0
 2d2:	0c c0       	rjmp	.+24     	; 0x2ec <Hal__ReadAllKey+0x22>
	{
		tab->key[index]=Hal__ReadKey(index);
 2d4:	0c 2f       	mov	r16, r28
 2d6:	10 e0       	ldi	r17, 0x00	; 0
 2d8:	8c 2f       	mov	r24, r28
 2da:	0e 94 4e 01 	call	0x29c	; 0x29c <Hal__ReadKey>
 2de:	f8 01       	movw	r30, r16
 2e0:	e5 5b       	subi	r30, 0xB5	; 181
 2e2:	fe 4f       	sbci	r31, 0xFE	; 254
 2e4:	80 83       	st	Z, r24
		
		if (tab->key[index] == TRUE){ // A chave x foi apertada
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	29 f0       	breq	.+10     	; 0x2f4 <Hal__ReadAllKey+0x2a>


unsigned char Hal__ReadAllKey(void)
{
	KEY_INPUT_TYPE index;
	for(index = 0; index < NUM_OF_KEYS; index++)
 2ea:	cf 5f       	subi	r28, 0xFF	; 255
 2ec:	c4 30       	cpi	r28, 0x04	; 4
 2ee:	90 f3       	brcs	.-28     	; 0x2d4 <Hal__ReadAllKey+0xa>
		
		if (tab->key[index] == TRUE){ // A chave x foi apertada
			return index;
		}
	}
	return NUM_OF_KEYS; // Nenhuma chave apertada
 2f0:	84 e0       	ldi	r24, 0x04	; 4
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <Hal__ReadAllKey+0x2c>
	for(index = 0; index < NUM_OF_KEYS; index++)
	{
		tab->key[index]=Hal__ReadKey(index);
		
		if (tab->key[index] == TRUE){ // A chave x foi apertada
			return index;
 2f4:	8c 2f       	mov	r24, r28
		}
	}
	return NUM_OF_KEYS; // Nenhuma chave apertada
	
}
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	08 95       	ret

000002fe <Hal__WriteValtoSegment>:



void Hal__WriteValtoSegment(const char* ptr_display_values){	
	SevenSeg_WriteValueToSegment(ptr_display_values);
 2fe:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <SevenSeg_WriteValueToSegment>
 302:	08 95       	ret

00000304 <LEDsUpdate>:
//---------------------------------------------------------------------------------------------------------------------
/**
 *  This local function update the LEDs status
 */
void LEDsUpdate(void)
{
 304:	cf 93       	push	r28
	unsigned char index;
	unsigned char value;
	
	//LEDs Update
	for(index = 0; index < NUM_OF_LEDS; index++){
 306:	c0 e0       	ldi	r28, 0x00	; 0
 308:	1b c0       	rjmp	.+54     	; 0x340 <LEDsUpdate+0x3c>
		if(Leds_Enable_Table[index] == ENABLED){
 30a:	8c 2f       	mov	r24, r28
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	fc 01       	movw	r30, r24
 310:	e6 5d       	subi	r30, 0xD6	; 214
 312:	fe 4f       	sbci	r31, 0xFE	; 254
 314:	20 81       	ld	r18, Z
 316:	21 30       	cpi	r18, 0x01	; 1
 318:	91 f4       	brne	.+36     	; 0x33e <LEDsUpdate+0x3a>
			value = LED_ON;
			if(Hal_Leds_Buffer[index] > 0){  
 31a:	fc 01       	movw	r30, r24
 31c:	e9 5b       	subi	r30, 0xB9	; 185
 31e:	fe 4f       	sbci	r31, 0xFE	; 254
 320:	20 81       	ld	r18, Z
 322:	21 11       	cpse	r18, r1
 324:	02 c0       	rjmp	.+4      	; 0x32a <LEDsUpdate+0x26>
	unsigned char value;
	
	//LEDs Update
	for(index = 0; index < NUM_OF_LEDS; index++){
		if(Leds_Enable_Table[index] == ENABLED){
			value = LED_ON;
 326:	40 e0       	ldi	r20, 0x00	; 0
 328:	01 c0       	rjmp	.+2      	; 0x32c <LEDsUpdate+0x28>
			if(Hal_Leds_Buffer[index] > 0){  
					value = LED_OFF;
 32a:	41 e0       	ldi	r20, 0x01	; 1
			}
			GPIO_PIN_WRITE(LED_GPIO[index].port, LED_GPIO[index].pin, value);
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	fc 01       	movw	r30, r24
 332:	e2 5f       	subi	r30, 0xF2	; 242
 334:	fe 4f       	sbci	r31, 0xFE	; 254
 336:	61 81       	ldd	r22, Z+1	; 0x01
 338:	80 81       	ld	r24, Z
 33a:	0e 94 c7 00 	call	0x18e	; 0x18e <GPIO_PIN_WRITE>
{
	unsigned char index;
	unsigned char value;
	
	//LEDs Update
	for(index = 0; index < NUM_OF_LEDS; index++){
 33e:	cf 5f       	subi	r28, 0xFF	; 255
 340:	c4 30       	cpi	r28, 0x04	; 4
 342:	18 f3       	brcs	.-58     	; 0x30a <LEDsUpdate+0x6>
					value = LED_OFF;
			}
			GPIO_PIN_WRITE(LED_GPIO[index].port, LED_GPIO[index].pin, value);
		}
	}
}
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <KeysRead>:
/**
 *  This local function reads the keys input and update the Hal_Keys_Buffer
 */

void KeysRead(void)
{
 348:	0f 93       	push	r16
 34a:	1f 93       	push	r17
 34c:	cf 93       	push	r28
	//Keys read
	KEY_INPUT_TYPE key_index;
	unsigned char value;
	
	for(key_index = KEY_0; key_index < NUM_OF_KEYS; key_index++){
 34e:	c0 e0       	ldi	r28, 0x00	; 0
 350:	38 c0       	rjmp	.+112    	; 0x3c2 <KeysRead+0x7a>
		if(Keys_Enable_Table[key_index] == ENABLED){
 352:	0c 2f       	mov	r16, r28
 354:	10 e0       	ldi	r17, 0x00	; 0
 356:	f8 01       	movw	r30, r16
 358:	ea 5d       	subi	r30, 0xDA	; 218
 35a:	fe 4f       	sbci	r31, 0xFE	; 254
 35c:	80 81       	ld	r24, Z
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	79 f5       	brne	.+94     	; 0x3c0 <KeysRead+0x78>
			value = GPIO_PIN_READ(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin);
 362:	f8 01       	movw	r30, r16
 364:	ee 0f       	add	r30, r30
 366:	ff 1f       	adc	r31, r31
 368:	ea 5f       	subi	r30, 0xFA	; 250
 36a:	fe 4f       	sbci	r31, 0xFE	; 254
 36c:	61 81       	ldd	r22, Z+1	; 0x01
 36e:	80 81       	ld	r24, Z
 370:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <GPIO_PIN_READ>
			if(value == KEY_PRESSED){
 374:	81 11       	cpse	r24, r1
 376:	12 c0       	rjmp	.+36     	; 0x39c <KeysRead+0x54>
				BIT_SET(Hal_Keys_Buffer,key_index);
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	a0 e0       	ldi	r26, 0x00	; 0
 37e:	b0 e0       	ldi	r27, 0x00	; 0
 380:	0c 2e       	mov	r0, r28
 382:	04 c0       	rjmp	.+8      	; 0x38c <KeysRead+0x44>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	aa 1f       	adc	r26, r26
 38a:	bb 1f       	adc	r27, r27
 38c:	0a 94       	dec	r0
 38e:	d2 f7       	brpl	.-12     	; 0x384 <KeysRead+0x3c>
 390:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <Hal_Keys_Buffer>
 394:	82 2b       	or	r24, r18
 396:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <Hal_Keys_Buffer>
 39a:	12 c0       	rjmp	.+36     	; 0x3c0 <KeysRead+0x78>
			}
			else{
				BIT_CLR(Hal_Keys_Buffer,key_index);
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	a0 e0       	ldi	r26, 0x00	; 0
 3a2:	b0 e0       	ldi	r27, 0x00	; 0
 3a4:	0c 2e       	mov	r0, r28
 3a6:	04 c0       	rjmp	.+8      	; 0x3b0 <KeysRead+0x68>
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	aa 1f       	adc	r26, r26
 3ae:	bb 1f       	adc	r27, r27
 3b0:	0a 94       	dec	r0
 3b2:	d2 f7       	brpl	.-12     	; 0x3a8 <KeysRead+0x60>
 3b4:	80 95       	com	r24
 3b6:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <Hal_Keys_Buffer>
 3ba:	89 23       	and	r24, r25
 3bc:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <Hal_Keys_Buffer>
{
	//Keys read
	KEY_INPUT_TYPE key_index;
	unsigned char value;
	
	for(key_index = KEY_0; key_index < NUM_OF_KEYS; key_index++){
 3c0:	cf 5f       	subi	r28, 0xFF	; 255
 3c2:	c4 30       	cpi	r28, 0x04	; 4
 3c4:	30 f2       	brcs	.-116    	; 0x352 <KeysRead+0xa>
			}
		}
	}
	

}
 3c6:	cf 91       	pop	r28
 3c8:	1f 91       	pop	r17
 3ca:	0f 91       	pop	r16
 3cc:	08 95       	ret

000003ce <Hal__FastHandler>:
	
}

void Hal__FastHandler(void)
{
	LEDsUpdate();   // update the LEDs status
 3ce:	0e 94 82 01 	call	0x304	; 0x304 <LEDsUpdate>
	KeysRead();     // reads the keys and update the Hal_Keys_Buffer
 3d2:	0e 94 a4 01 	call	0x348	; 0x348 <KeysRead>
 3d6:	08 95       	ret

000003d8 <SevenSeg_WriteValueToSegment>:
const char SEGMENT_SELECT[] = {0xF1,0xF2,0xF4,0xF8};


/* Write a value to one of the 4 digits of the display */
void SevenSeg_WriteValueToSegment(const char* ptr_display_values)
{
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	ec 01       	movw	r28, r24
	for (uint8_t Segment = 0 ; Segment < NUM_SEG; Segment ++){
 3e2:	00 e0       	ldi	r16, 0x00	; 0
 3e4:	6a c0       	rjmp	.+212    	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
		GPIO_PIN_WRITE(PORT_D, LATCH_PIN, RESET); // Inicia o processo de escrever no registrador
 3e6:	40 e0       	ldi	r20, 0x00	; 0
 3e8:	64 e0       	ldi	r22, 0x04	; 4
 3ea:	82 e0       	ldi	r24, 0x02	; 2
 3ec:	0e 94 c7 00 	call	0x18e	; 0x18e <GPIO_PIN_WRITE>


		for (uint8_t i = 0; i < 8; i++) { // Digitos do display a serem escritos
 3f0:	10 e0       	ldi	r17, 0x00	; 0
 3f2:	2a c0       	rjmp	.+84     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
			
			if (ptr_display_values[Segment] & (1 << (7 - i))) {
 3f4:	fe 01       	movw	r30, r28
 3f6:	e0 0f       	add	r30, r16
 3f8:	f1 1d       	adc	r31, r1
 3fa:	80 81       	ld	r24, Z
 3fc:	27 e0       	ldi	r18, 0x07	; 7
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	21 1b       	sub	r18, r17
 402:	31 09       	sbc	r19, r1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	02 c0       	rjmp	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 408:	95 95       	asr	r25
 40a:	87 95       	ror	r24
 40c:	2a 95       	dec	r18
 40e:	e2 f7       	brpl	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 410:	80 ff       	sbrs	r24, 0
 412:	06 c0       	rjmp	.+12     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
				GPIO_PIN_WRITE(PORT_B, 0, SET);
 414:	41 e0       	ldi	r20, 0x01	; 1
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	0e 94 c7 00 	call	0x18e	; 0x18e <GPIO_PIN_WRITE>
 41e:	05 c0       	rjmp	.+10     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
			}
			else {
				GPIO_PIN_WRITE(PORT_B, 0, RESET);
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0e 94 c7 00 	call	0x18e	; 0x18e <GPIO_PIN_WRITE>
			}	
			GPIO_PIN_WRITE(PORT_D, CLK_PIN, SET);
 42a:	41 e0       	ldi	r20, 0x01	; 1
 42c:	67 e0       	ldi	r22, 0x07	; 7
 42e:	82 e0       	ldi	r24, 0x02	; 2
 430:	0e 94 c7 00 	call	0x18e	; 0x18e <GPIO_PIN_WRITE>
			GPIO_PIN_WRITE(PORT_D, CLK_PIN, RESET);
 434:	40 e0       	ldi	r20, 0x00	; 0
 436:	67 e0       	ldi	r22, 0x07	; 7
 438:	82 e0       	ldi	r24, 0x02	; 2
 43a:	0e 94 c7 00 	call	0x18e	; 0x18e <GPIO_PIN_WRITE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 43e:	86 ea       	ldi	r24, 0xA6	; 166
 440:	8a 95       	dec	r24
 442:	f1 f7       	brne	.-4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 444:	00 c0       	rjmp	.+0      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
{
	for (uint8_t Segment = 0 ; Segment < NUM_SEG; Segment ++){
		GPIO_PIN_WRITE(PORT_D, LATCH_PIN, RESET); // Inicia o processo de escrever no registrador


		for (uint8_t i = 0; i < 8; i++) { // Digitos do display a serem escritos
 446:	1f 5f       	subi	r17, 0xFF	; 255
 448:	18 30       	cpi	r17, 0x08	; 8
 44a:	a0 f2       	brcs	.-88     	; 0x3f4 <SevenSeg_WriteValueToSegment+0x1c>
 44c:	10 e0       	ldi	r17, 0x00	; 0
 44e:	2d c0       	rjmp	.+90     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
		}

		

		for (uint8_t i = 0; i < 8; i++) { // Quais seguimento que devemos escrever
			if (SEGMENT_SELECT[Segment] & (1 << (7 - i))) {
 450:	e0 2f       	mov	r30, r16
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	e2 5d       	subi	r30, 0xD2	; 210
 456:	fe 4f       	sbci	r31, 0xFE	; 254
 458:	80 81       	ld	r24, Z
 45a:	27 e0       	ldi	r18, 0x07	; 7
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	21 1b       	sub	r18, r17
 460:	31 09       	sbc	r19, r1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	02 c0       	rjmp	.+4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 466:	95 95       	asr	r25
 468:	87 95       	ror	r24
 46a:	2a 95       	dec	r18
 46c:	e2 f7       	brpl	.-8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46e:	80 ff       	sbrs	r24, 0
 470:	06 c0       	rjmp	.+12     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
				GPIO_PIN_WRITE(PORT_B, 0, SET);
 472:	41 e0       	ldi	r20, 0x01	; 1
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	0e 94 c7 00 	call	0x18e	; 0x18e <GPIO_PIN_WRITE>
 47c:	05 c0       	rjmp	.+10     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
			} 
			else {
				GPIO_PIN_WRITE(PORT_B, 0, RESET);
 47e:	40 e0       	ldi	r20, 0x00	; 0
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	0e 94 c7 00 	call	0x18e	; 0x18e <GPIO_PIN_WRITE>
			}
			GPIO_PIN_WRITE(PORT_D, CLK_PIN, SET);
 488:	41 e0       	ldi	r20, 0x01	; 1
 48a:	67 e0       	ldi	r22, 0x07	; 7
 48c:	82 e0       	ldi	r24, 0x02	; 2
 48e:	0e 94 c7 00 	call	0x18e	; 0x18e <GPIO_PIN_WRITE>
			GPIO_PIN_WRITE(PORT_D, CLK_PIN, RESET);
 492:	40 e0       	ldi	r20, 0x00	; 0
 494:	67 e0       	ldi	r22, 0x07	; 7
 496:	82 e0       	ldi	r24, 0x02	; 2
 498:	0e 94 c7 00 	call	0x18e	; 0x18e <GPIO_PIN_WRITE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 49c:	8d ee       	ldi	r24, 0xED	; 237
 49e:	92 e0       	ldi	r25, 0x02	; 2
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4a6:	00 00       	nop
			_delay_us(500);
		}

		

		for (uint8_t i = 0; i < 8; i++) { // Quais seguimento que devemos escrever
 4a8:	1f 5f       	subi	r17, 0xFF	; 255
 4aa:	18 30       	cpi	r17, 0x08	; 8
 4ac:	88 f2       	brcs	.-94     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
			GPIO_PIN_WRITE(PORT_D, CLK_PIN, RESET);
			_delay_ms(3);
		}
		
			
		GPIO_PIN_WRITE(PORT_D, LATCH_PIN, SET);
 4ae:	41 e0       	ldi	r20, 0x01	; 1
 4b0:	64 e0       	ldi	r22, 0x04	; 4
 4b2:	82 e0       	ldi	r24, 0x02	; 2
 4b4:	0e 94 c7 00 	call	0x18e	; 0x18e <GPIO_PIN_WRITE>


/* Write a value to one of the 4 digits of the display */
void SevenSeg_WriteValueToSegment(const char* ptr_display_values)
{
	for (uint8_t Segment = 0 ; Segment < NUM_SEG; Segment ++){
 4b8:	0f 5f       	subi	r16, 0xFF	; 255
 4ba:	04 30       	cpi	r16, 0x04	; 4
 4bc:	08 f4       	brcc	.+2      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4be:	93 cf       	rjmp	.-218    	; 0x3e6 <SevenSeg_WriteValueToSegment+0xe>
			
		GPIO_PIN_WRITE(PORT_D, LATCH_PIN, SET);
		
	}
	
}
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	08 95       	ret

000004ca <Display__Initialize>:
/**
 *  Inicializa vari?veis referente ao estado inicial do forno e das chaves
 */
void Display__Initialize(void)
	{
	Oven_Display_State = OVEN_INIT;
 4ca:	84 e0       	ldi	r24, 0x04	; 4
 4cc:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <Oven_Display_State>
	Display_Keys_Map = KEY_OFF_EVENT;
 4d0:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <Display_Keys_Map>
 4d4:	08 95       	ret

000004d6 <Display__SetState>:
 *  A funcao atualiza a variavel global:
 *  Oven_Display_State que indica o estado do forno  
 */
void Display__SetState(OVEN_DISPLAY_STATE_TYPE state)
{
	if(state < NUM_OF_OVEN_STATES)
 4d6:	86 30       	cpi	r24, 0x06	; 6
 4d8:	10 f4       	brcc	.+4      	; 0x4de <Display__SetState+0x8>
	{
		Oven_Display_State = state;
 4da:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <Oven_Display_State>
 4de:	08 95       	ret

000004e0 <UpdateDisplayLeds>:
     tipo Hal__SetLed() 
 */
void UpdateDisplayLeds(void)
{
	
	switch(Oven_Display_State)
 4e0:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <Oven_Display_State>
 4e4:	81 30       	cpi	r24, 0x01	; 1
 4e6:	51 f0       	breq	.+20     	; 0x4fc <UpdateDisplayLeds+0x1c>
 4e8:	28 f0       	brcs	.+10     	; 0x4f4 <UpdateDisplayLeds+0x14>
 4ea:	82 30       	cpi	r24, 0x02	; 2
 4ec:	a1 f0       	breq	.+40     	; 0x516 <UpdateDisplayLeds+0x36>
 4ee:	83 30       	cpi	r24, 0x03	; 3
 4f0:	f9 f0       	breq	.+62     	; 0x530 <UpdateDisplayLeds+0x50>
 4f2:	08 95       	ret
	{
	case OVEN_OFF:
	{
	       Hal__SetAllLeds(APAGA_LED);
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	0e 94 3b 01 	call	0x276	; 0x276 <Hal__SetAllLeds>
		   break;
 4fa:	08 95       	ret
	   		
		break;

	case OVEN_MIN:
	{
		Hal__SetLed(LED_0, ACENDE_LED);
 4fc:	60 e0       	ldi	r22, 0x00	; 0
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	0e 94 2e 01 	call	0x25c	; 0x25c <Hal__SetLed>
		Hal__SetLed(LED_1, APAGA_LED);
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 2e 01 	call	0x25c	; 0x25c <Hal__SetLed>
		Hal__SetLed(LED_2, APAGA_LED);
 50c:	61 e0       	ldi	r22, 0x01	; 1
 50e:	82 e0       	ldi	r24, 0x02	; 2
 510:	0e 94 2e 01 	call	0x25c	; 0x25c <Hal__SetLed>
		break;
 514:	08 95       	ret
	}
	case OVEN_MED:
	{
		Hal__SetLed(LED_0, ACENDE_LED);
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	0e 94 2e 01 	call	0x25c	; 0x25c <Hal__SetLed>
		Hal__SetLed(LED_1, ACENDE_LED);
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	0e 94 2e 01 	call	0x25c	; 0x25c <Hal__SetLed>
		Hal__SetLed(LED_2, APAGA_LED);
 526:	61 e0       	ldi	r22, 0x01	; 1
 528:	82 e0       	ldi	r24, 0x02	; 2
 52a:	0e 94 2e 01 	call	0x25c	; 0x25c <Hal__SetLed>
		break;
 52e:	08 95       	ret
	}
	case OVEN_MAX:
	{
		Hal__SetLed(LED_0, ACENDE_LED);
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	0e 94 2e 01 	call	0x25c	; 0x25c <Hal__SetLed>
		Hal__SetLed(LED_1, ACENDE_LED);
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	0e 94 2e 01 	call	0x25c	; 0x25c <Hal__SetLed>
		Hal__SetLed(LED_2, ACENDE_LED);
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	82 e0       	ldi	r24, 0x02	; 2
 544:	0e 94 2e 01 	call	0x25c	; 0x25c <Hal__SetLed>
 548:	08 95       	ret

0000054a <ReadDisplayKeys>:
 *  Atualiza a variavel global (Display_Keys_Map) das chaves
 *  chamando Hal_ReadKey()
 */
void ReadDisplayKeys(void)
{	
	unsigned char key_press=Hal__ReadAllKey(); // Lê todas as chaves
 54a:	0e 94 65 01 	call	0x2ca	; 0x2ca <Hal__ReadAllKey>
	
	switch(key_press){
 54e:	81 30       	cpi	r24, 0x01	; 1
 550:	51 f0       	breq	.+20     	; 0x566 <ReadDisplayKeys+0x1c>
 552:	28 f0       	brcs	.+10     	; 0x55e <ReadDisplayKeys+0x14>
 554:	82 30       	cpi	r24, 0x02	; 2
 556:	59 f0       	breq	.+22     	; 0x56e <ReadDisplayKeys+0x24>
 558:	83 30       	cpi	r24, 0x03	; 3
 55a:	69 f0       	breq	.+26     	; 0x576 <ReadDisplayKeys+0x2c>
 55c:	08 95       	ret
		case KEY_0:
			Display_Keys_Map= KEY_MIN_EVENT;
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <Display_Keys_Map>
			break;
 564:	08 95       	ret
		case KEY_1:
			Display_Keys_Map= KEY_MED_EVENT;
 566:	82 e0       	ldi	r24, 0x02	; 2
 568:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <Display_Keys_Map>
			break;
 56c:	08 95       	ret
		case KEY_2:
			Display_Keys_Map= KEY_MAX_EVENT;
 56e:	83 e0       	ldi	r24, 0x03	; 3
 570:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <Display_Keys_Map>
			break;
 574:	08 95       	ret
		case KEY_3:
			Display_Keys_Map= KEY_OFF_EVENT;
 576:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <Display_Keys_Map>
 57a:	08 95       	ret

0000057c <Display__GetEvent>:


KEY_EVENT_TYPE Display__GetEvent(void)
{
	KEY_EVENT_TYPE event;
	ReadDisplayKeys();    // L? as chaves e coloca valor na vari?vel global Display_Keys_Map
 57c:	0e 94 a5 02 	call	0x54a	; 0x54a <ReadDisplayKeys>
	event = Display_Keys_Map;  //atribui a event o global atualizada em ReadDisplayKeys()
	return (event);
}
 580:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <Display_Keys_Map>
 584:	08 95       	ret

00000586 <UpdateDisplaySevenSeg>:


void UpdateDisplaySevenSeg(void)
{
	const char* ptr_display_values = &ZERADO_DIGITO[0]; // Inicializa o ponteiro 
	switch(Oven_Display_State)
 586:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <Oven_Display_State>
 58a:	82 30       	cpi	r24, 0x02	; 2
 58c:	39 f0       	breq	.+14     	; 0x59c <UpdateDisplaySevenSeg+0x16>
 58e:	83 30       	cpi	r24, 0x03	; 3
 590:	41 f0       	breq	.+16     	; 0x5a2 <UpdateDisplaySevenSeg+0x1c>
 592:	81 30       	cpi	r24, 0x01	; 1
 594:	49 f0       	breq	.+18     	; 0x5a8 <UpdateDisplaySevenSeg+0x22>



void UpdateDisplaySevenSeg(void)
{
	const char* ptr_display_values = &ZERADO_DIGITO[0]; // Inicializa o ponteiro 
 596:	8e e3       	ldi	r24, 0x3E	; 62
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	08 c0       	rjmp	.+16     	; 0x5ac <UpdateDisplaySevenSeg+0x26>
		case OVEN_MIN:
			ptr_display_values = &MINIMO_DIGITO[0];
			break;
		case OVEN_MED:
			{
			ptr_display_values = &MEDIO_DIGITO[0];
 59c:	86 e3       	ldi	r24, 0x36	; 54
 59e:	91 e0       	ldi	r25, 0x01	; 1
			break;
 5a0:	05 c0       	rjmp	.+10     	; 0x5ac <UpdateDisplaySevenSeg+0x26>
			}
		case OVEN_MAX:
			{
			ptr_display_values = &MAXIMO_DIGITO[0];
 5a2:	82 e3       	ldi	r24, 0x32	; 50
 5a4:	91 e0       	ldi	r25, 0x01	; 1
			break;
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <UpdateDisplaySevenSeg+0x26>
			break;
		case OVEN_INIT:
		case OVEN_TIMEOUT:
			break;
		case OVEN_MIN:
			ptr_display_values = &MINIMO_DIGITO[0];
 5a8:	8a e3       	ldi	r24, 0x3A	; 58
 5aa:	91 e0       	ldi	r25, 0x01	; 1
		default:
			{
			break;
			}
	   }
		Hal__WriteValtoSegment(ptr_display_values);
 5ac:	0e 94 7f 01 	call	0x2fe	; 0x2fe <Hal__WriteValtoSegment>
 5b0:	08 95       	ret

000005b2 <Display__Handler>:
 *   Atualiza o display(leds) do estado do forno em fun??o da leitura das chaves
 */
void Display__Handler(void)
{
	#if (LED_DISPLAY == ENABLED)	
	   UpdateDisplayLeds();        // atualiza??o dos leds
 5b2:	0e 94 70 02 	call	0x4e0	; 0x4e0 <UpdateDisplayLeds>
	#endif	                       // fun??o privada!
	#if (SEVEN_SEG_DISPLAY == ENABLED)
		UpdateDisplaySevenSeg();
 5b6:	0e 94 c3 02 	call	0x586	; 0x586 <UpdateDisplaySevenSeg>
 5ba:	08 95       	ret

000005bc <_exit>:
 5bc:	f8 94       	cli

000005be <__stop_program>:
 5be:	ff cf       	rjmp	.-2      	; 0x5be <__stop_program>
