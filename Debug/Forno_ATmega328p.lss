
Forno_ATmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000004e2  00000576  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800138  00800138  000005ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018ae  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d58  00000000  00000000  00002006  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a11  00000000  00000000  00002d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00003770  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000945  00000000  00000000  00003970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004e6  00000000  00000000  000042b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000479b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ee       	ldi	r30, 0xE2	; 226
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 33       	cpi	r26, 0x38	; 56
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e3       	ldi	r26, 0x38	; 56
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 34       	cpi	r26, 0x43	; 67
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 75 00 	call	0xea	; 0xea <main>
  9e:	0c 94 6f 02 	jmp	0x4de	; 0x4de <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Appl__Initialize>:
//-------------------------------------- Public Functions -------------------------------------------------------------
//=====================================================================================================================


void Appl__Initialize(void){
	User_Action = EVENTS_NO_EVENT;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
  ac:	08 95       	ret

000000ae <Appl__Handler>:
}


void Appl__Handler(void)
{
	User_Action = Display__GetEvent(); 
  ae:	0e 94 4f 02 	call	0x49e	; 0x49e <Display__GetEvent>
  b2:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
	if (User_Action != EVENTS_NO_EVENT)
  b6:	8f 3f       	cpi	r24, 0xFF	; 255
  b8:	b9 f0       	breq	.+46     	; 0xe8 <Appl__Handler+0x3a>
	{
		switch(User_Action)
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	51 f0       	breq	.+20     	; 0xd2 <Appl__Handler+0x24>
  be:	28 f0       	brcs	.+10     	; 0xca <Appl__Handler+0x1c>
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	59 f0       	breq	.+22     	; 0xda <Appl__Handler+0x2c>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	69 f0       	breq	.+26     	; 0xe2 <Appl__Handler+0x34>
  c8:	08 95       	ret
		{
			case KEY_OFF_EVENT:
			Display__SetState(OVEN_OFF);
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Display__SetState>
			break;
  d0:	08 95       	ret
			
			case KEY_MIN_EVENT:
			Display__SetState(OVEN_MIN);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Display__SetState>
			break;
  d8:	08 95       	ret
			
			case KEY_MED_EVENT:
			Display__SetState(OVEN_MED);
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Display__SetState>
			break;
  e0:	08 95       	ret
			
			case KEY_MAX_EVENT:
			Display__SetState(OVEN_MAX);
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Display__SetState>
  e8:	08 95       	ret

000000ea <main>:
//=====================================================================================================================

void main(void)
{
	
	Slot = SLOT_1;
  ea:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <Slot>
	
	// Functions Initialization
	INITIALIZE_TASKS();
  ee:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Hal__Initialize>
  f2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <Display__Initialize>
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <Appl__Initialize>
	
	//Main Loop
	for(;;)
	{
		
		switch(Slot)
  fa:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Slot>
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	39 f0       	breq	.+14     	; 0x110 <main+0x26>
 102:	18 f0       	brcs	.+6      	; 0x10a <main+0x20>
 104:	85 30       	cpi	r24, 0x05	; 5
 106:	38 f4       	brcc	.+14     	; 0x116 <main+0x2c>
 108:	08 c0       	rjmp	.+16     	; 0x11a <main+0x30>
		{
			case SLOT_1:
			SLOT_1_TASKS();
 10a:	0e 94 57 00 	call	0xae	; 0xae <Appl__Handler>
			break;
 10e:	05 c0       	rjmp	.+10     	; 0x11a <main+0x30>

			case SLOT_2:
			SLOT_2_TASKS();
 110:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <Display__Handler>
			break;
 114:	02 c0       	rjmp	.+4      	; 0x11a <main+0x30>
			case SLOT_5:
			SLOT_5_TASKS();
			break;

			default:
			Slot = SLOT_1;
 116:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <Slot>
			break;

		}

		Slot++;
 11a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Slot>
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Slot>
		if(Slot >= NUM_OF_MAIN_SLOTS)
 124:	85 30       	cpi	r24, 0x05	; 5
 126:	48 f3       	brcs	.-46     	; 0xfa <main+0x10>
		{
			Slot = SLOT_1;
 128:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <Slot>
 12c:	e6 cf       	rjmp	.-52     	; 0xfa <main+0x10>

0000012e <GPIO_CONFIG>:
void GPIO_PIN_TOGGLE(GPIO_PORT port, unsigned char pin){
	volatile GPIO_DATA_TYPE *pt_data;
	pt_data = GPIO_DATA_LIST[port];
	
	// Se pegar o set_mask é fazer XOR com o pino que você quer, ex: 0b11111111 xor 0x1 = 0b11111110
	pt_data->DATA_OUT_PULL_REG.byte ^= GPIO_PIN_SET_MASK[pin];
 12e:	83 30       	cpi	r24, 0x03	; 3
 130:	58 f5       	brcc	.+86     	; 0x188 <GPIO_CONFIG+0x5a>
 132:	68 30       	cpi	r22, 0x08	; 8
 134:	48 f5       	brcc	.+82     	; 0x188 <GPIO_CONFIG+0x5a>
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	fb 01       	movw	r30, r22
 13a:	e4 5e       	subi	r30, 0xE4	; 228
 13c:	fe 4f       	sbci	r31, 0xFE	; 254
 13e:	20 81       	ld	r18, Z
 140:	fb 01       	movw	r30, r22
 142:	ec 5e       	subi	r30, 0xEC	; 236
 144:	fe 4f       	sbci	r31, 0xFE	; 254
 146:	90 81       	ld	r25, Z
 148:	e8 2f       	mov	r30, r24
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	ee 0f       	add	r30, r30
 14e:	ff 1f       	adc	r31, r31
 150:	e0 50       	subi	r30, 0x00	; 0
 152:	ff 4f       	sbci	r31, 0xFF	; 255
 154:	01 90       	ld	r0, Z+
 156:	f0 81       	ld	r31, Z
 158:	e0 2d       	mov	r30, r0
 15a:	41 30       	cpi	r20, 0x01	; 1
 15c:	59 f0       	breq	.+22     	; 0x174 <GPIO_CONFIG+0x46>
 15e:	18 f0       	brcs	.+6      	; 0x166 <GPIO_CONFIG+0x38>
 160:	42 30       	cpi	r20, 0x02	; 2
 162:	79 f0       	breq	.+30     	; 0x182 <GPIO_CONFIG+0x54>
 164:	08 95       	ret
 166:	81 81       	ldd	r24, Z+1	; 0x01
 168:	98 23       	and	r25, r24
 16a:	91 83       	std	Z+1, r25	; 0x01
 16c:	82 81       	ldd	r24, Z+2	; 0x02
 16e:	28 2b       	or	r18, r24
 170:	22 83       	std	Z+2, r18	; 0x02
 172:	08 95       	ret
 174:	81 81       	ldd	r24, Z+1	; 0x01
 176:	89 23       	and	r24, r25
 178:	81 83       	std	Z+1, r24	; 0x01
 17a:	82 81       	ldd	r24, Z+2	; 0x02
 17c:	98 23       	and	r25, r24
 17e:	92 83       	std	Z+2, r25	; 0x02
 180:	08 95       	ret
 182:	81 81       	ldd	r24, Z+1	; 0x01
 184:	28 2b       	or	r18, r24
 186:	21 83       	std	Z+1, r18	; 0x01
 188:	08 95       	ret

0000018a <GPIO_PIN_WRITE>:
 18a:	e8 2f       	mov	r30, r24
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	ee 0f       	add	r30, r30
 190:	ff 1f       	adc	r31, r31
 192:	e0 50       	subi	r30, 0x00	; 0
 194:	ff 4f       	sbci	r31, 0xFF	; 255
 196:	a0 81       	ld	r26, Z
 198:	b1 81       	ldd	r27, Z+1	; 0x01
 19a:	41 30       	cpi	r20, 0x01	; 1
 19c:	61 f4       	brne	.+24     	; 0x1b6 <GPIO_PIN_WRITE+0x2c>
 19e:	12 96       	adiw	r26, 0x02	; 2
 1a0:	9c 91       	ld	r25, X
 1a2:	12 97       	sbiw	r26, 0x02	; 2
 1a4:	e6 2f       	mov	r30, r22
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	e4 5e       	subi	r30, 0xE4	; 228
 1aa:	fe 4f       	sbci	r31, 0xFE	; 254
 1ac:	80 81       	ld	r24, Z
 1ae:	89 2b       	or	r24, r25
 1b0:	12 96       	adiw	r26, 0x02	; 2
 1b2:	8c 93       	st	X, r24
 1b4:	08 95       	ret
 1b6:	12 96       	adiw	r26, 0x02	; 2
 1b8:	9c 91       	ld	r25, X
 1ba:	12 97       	sbiw	r26, 0x02	; 2
 1bc:	e6 2f       	mov	r30, r22
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ec 5e       	subi	r30, 0xEC	; 236
 1c2:	fe 4f       	sbci	r31, 0xFE	; 254
 1c4:	80 81       	ld	r24, Z
 1c6:	89 23       	and	r24, r25
 1c8:	12 96       	adiw	r26, 0x02	; 2
 1ca:	8c 93       	st	X, r24
 1cc:	08 95       	ret

000001ce <GPIO_PIN_READ>:
}

unsigned char GPIO_PIN_READ(GPIO_PORT port, unsigned char pin){
	volatile GPIO_DATA_TYPE *pt_data;
	pt_data = GPIO_DATA_LIST[port];
 1ce:	e8 2f       	mov	r30, r24
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	ee 0f       	add	r30, r30
 1d4:	ff 1f       	adc	r31, r31
 1d6:	e0 50       	subi	r30, 0x00	; 0
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	01 90       	ld	r0, Z+
 1dc:	f0 81       	ld	r31, Z
 1de:	e0 2d       	mov	r30, r0
	// AND dos dados de PINx com o pin_set_mask
	if(pt_data->DATA_IN_REG.byte & GPIO_PIN_SET_MASK[pin]){
 1e0:	90 81       	ld	r25, Z
 1e2:	e6 2f       	mov	r30, r22
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	e4 5e       	subi	r30, 0xE4	; 228
 1e8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ea:	80 81       	ld	r24, Z
 1ec:	89 23       	and	r24, r25
 1ee:	09 f0       	breq	.+2      	; 0x1f2 <GPIO_PIN_READ+0x24>
		return SET;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
	}
	return RESET;
 1f2:	08 95       	ret

000001f4 <Hal__Initialize>:
unsigned char Hal__ReadKey(KEY_INPUT_TYPE key)
{
	unsigned char value;
	value = GPIO_PIN_READ(KEYS_GPIO[key].port, KEYS_GPIO[key].pin);
	return (value);
}
 1f4:	cf 93       	push	r28
 1f6:	c0 e0       	ldi	r28, 0x00	; 0
 1f8:	0c c0       	rjmp	.+24     	; 0x212 <Hal__Initialize+0x1e>
 1fa:	ec 2f       	mov	r30, r28
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	e4 5f       	subi	r30, 0xF4	; 244
 204:	fe 4f       	sbci	r31, 0xFE	; 254
 206:	42 e0       	ldi	r20, 0x02	; 2
 208:	61 81       	ldd	r22, Z+1	; 0x01
 20a:	80 81       	ld	r24, Z
 20c:	0e 94 97 00 	call	0x12e	; 0x12e <GPIO_CONFIG>
 210:	cf 5f       	subi	r28, 0xFF	; 255
 212:	c4 30       	cpi	r28, 0x04	; 4
 214:	90 f3       	brcs	.-28     	; 0x1fa <Hal__Initialize+0x6>
 216:	c0 e0       	ldi	r28, 0x00	; 0
 218:	0c c0       	rjmp	.+24     	; 0x232 <Hal__Initialize+0x3e>
 21a:	ec 2f       	mov	r30, r28
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	ee 0f       	add	r30, r30
 220:	ff 1f       	adc	r31, r31
 222:	ea 5f       	subi	r30, 0xFA	; 250
 224:	fe 4f       	sbci	r31, 0xFE	; 254
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	61 81       	ldd	r22, Z+1	; 0x01
 22a:	80 81       	ld	r24, Z
 22c:	0e 94 97 00 	call	0x12e	; 0x12e <GPIO_CONFIG>
 230:	cf 5f       	subi	r28, 0xFF	; 255
 232:	c3 30       	cpi	r28, 0x03	; 3
 234:	90 f3       	brcs	.-28     	; 0x21a <Hal__Initialize+0x26>
 236:	42 e0       	ldi	r20, 0x02	; 2
 238:	64 e0       	ldi	r22, 0x04	; 4
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	0e 94 97 00 	call	0x12e	; 0x12e <GPIO_CONFIG>
 240:	42 e0       	ldi	r20, 0x02	; 2
 242:	67 e0       	ldi	r22, 0x07	; 7
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	0e 94 97 00 	call	0x12e	; 0x12e <GPIO_CONFIG>
 24a:	42 e0       	ldi	r20, 0x02	; 2
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 97 00 	call	0x12e	; 0x12e <GPIO_CONFIG>
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <Hal__SetLed>:
 258:	46 2f       	mov	r20, r22
 25a:	e8 2f       	mov	r30, r24
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	ee 0f       	add	r30, r30
 260:	ff 1f       	adc	r31, r31
 262:	e4 5f       	subi	r30, 0xF4	; 244
 264:	fe 4f       	sbci	r31, 0xFE	; 254
 266:	61 81       	ldd	r22, Z+1	; 0x01
 268:	80 81       	ld	r24, Z
 26a:	0e 94 c5 00 	call	0x18a	; 0x18a <GPIO_PIN_WRITE>
 26e:	08 95       	ret

00000270 <Hal__SetAllLeds>:
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	d8 2f       	mov	r29, r24
 276:	c0 e0       	ldi	r28, 0x00	; 0
 278:	0c c0       	rjmp	.+24     	; 0x292 <Hal__SetAllLeds+0x22>
 27a:	ec 2f       	mov	r30, r28
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	ee 0f       	add	r30, r30
 280:	ff 1f       	adc	r31, r31
 282:	e4 5f       	subi	r30, 0xF4	; 244
 284:	fe 4f       	sbci	r31, 0xFE	; 254
 286:	4d 2f       	mov	r20, r29
 288:	61 81       	ldd	r22, Z+1	; 0x01
 28a:	80 81       	ld	r24, Z
 28c:	0e 94 c5 00 	call	0x18a	; 0x18a <GPIO_PIN_WRITE>
 290:	cf 5f       	subi	r28, 0xFF	; 255
 292:	c4 30       	cpi	r28, 0x04	; 4
 294:	90 f3       	brcs	.-28     	; 0x27a <Hal__SetAllLeds+0xa>
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <Hal__ReadAllKey>:
 *  Use this function to read the status of all keys
 *  *  return: retorno o ponteiro da estrutura com os vetores das chaves*/


KEYS_READ* Hal__ReadAllKey(void)
{
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
	KEY_INPUT_TYPE index;
	for (index = 0; index < NUM_OF_KEYS; index++)
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	07 c0       	rjmp	.+14     	; 0x2b4 <Hal__ReadAllKey+0x18>
		tab.key[index] = 0xff;
 2a6:	e8 2f       	mov	r30, r24
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	e2 5c       	subi	r30, 0xC2	; 194
 2ac:	fe 4f       	sbci	r31, 0xFE	; 254
 2ae:	9f ef       	ldi	r25, 0xFF	; 255
 2b0:	90 83       	st	Z, r25


KEYS_READ* Hal__ReadAllKey(void)
{
	KEY_INPUT_TYPE index;
	for (index = 0; index < NUM_OF_KEYS; index++)
 2b2:	8f 5f       	subi	r24, 0xFF	; 255
 2b4:	83 30       	cpi	r24, 0x03	; 3
 2b6:	b8 f3       	brcs	.-18     	; 0x2a6 <Hal__ReadAllKey+0xa>
 2b8:	10 e0       	ldi	r17, 0x00	; 0
 2ba:	15 c0       	rjmp	.+42     	; 0x2e6 <Hal__ReadAllKey+0x4a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2bc:	87 ea       	ldi	r24, 0xA7	; 167
 2be:	91 e6       	ldi	r25, 0x61	; 97
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <Hal__ReadAllKey+0x24>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <Hal__ReadAllKey+0x2a>
 2c6:	00 00       	nop
		tab.key[index] = 0xff;
		
	
	for (index = 0; index < NUM_OF_KEYS; index++){
			_delay_ms(100);
			tab.key[index] = GPIO_PIN_READ(KEYS_GPIO[index].port, KEYS_GPIO[index].pin);
 2c8:	c1 2f       	mov	r28, r17
 2ca:	d0 e0       	ldi	r29, 0x00	; 0
 2cc:	fe 01       	movw	r30, r28
 2ce:	ee 0f       	add	r30, r30
 2d0:	ff 1f       	adc	r31, r31
 2d2:	ea 5f       	subi	r30, 0xFA	; 250
 2d4:	fe 4f       	sbci	r31, 0xFE	; 254
 2d6:	61 81       	ldd	r22, Z+1	; 0x01
 2d8:	80 81       	ld	r24, Z
 2da:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GPIO_PIN_READ>
 2de:	c2 5c       	subi	r28, 0xC2	; 194
 2e0:	de 4f       	sbci	r29, 0xFE	; 254
 2e2:	88 83       	st	Y, r24
	KEY_INPUT_TYPE index;
	for (index = 0; index < NUM_OF_KEYS; index++)
		tab.key[index] = 0xff;
		
	
	for (index = 0; index < NUM_OF_KEYS; index++){
 2e4:	1f 5f       	subi	r17, 0xFF	; 255
 2e6:	13 30       	cpi	r17, 0x03	; 3
 2e8:	48 f3       	brcs	.-46     	; 0x2bc <Hal__ReadAllKey+0x20>
			_delay_ms(100);
			tab.key[index] = GPIO_PIN_READ(KEYS_GPIO[index].port, KEYS_GPIO[index].pin);
	}
	return (&tab);
}
 2ea:	8e e3       	ldi	r24, 0x3E	; 62
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	08 95       	ret

000002f6 <Hal__WriteValtoSegment>:

char last_display_status;

void Hal__WriteValtoSegment(char* ptr_display_values){	
	SevenSeg_WriteValueToSegment(ptr_display_values);
 2f6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <SevenSeg_WriteValueToSegment>
 2fa:	08 95       	ret

000002fc <SevenSeg_WriteValueToSegment>:
const char SEGMENT_SELECT[] = {0xF1,0xF2,0xF4,0xF8};


/* Write a value to one of the 4 digits of the display */
void SevenSeg_WriteValueToSegment(char* ptr_display_values)
{
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	ec 01       	movw	r28, r24
	for (char Segment = 0 ; Segment < NUM_SEG; Segment ++){
 306:	00 e0       	ldi	r16, 0x00	; 0
 308:	64 c0       	rjmp	.+200    	; 0x3d2 <SevenSeg_WriteValueToSegment+0xd6>
		GPIO_PIN_WRITE(PORT_D, LATCH_PIN, RESET);
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	64 e0       	ldi	r22, 0x04	; 4
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	0e 94 c5 00 	call	0x18a	; 0x18a <GPIO_PIN_WRITE>


		for (uint8_t i = 0; i < 8; i++) {
 314:	10 e0       	ldi	r17, 0x00	; 0
 316:	23 c0       	rjmp	.+70     	; 0x35e <SevenSeg_WriteValueToSegment+0x62>
			if (ptr_display_values[0] & (1 << (7 - i))) {
 318:	88 81       	ld	r24, Y
 31a:	27 e0       	ldi	r18, 0x07	; 7
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	21 1b       	sub	r18, r17
 320:	31 09       	sbc	r19, r1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <SevenSeg_WriteValueToSegment+0x2e>
 326:	95 95       	asr	r25
 328:	87 95       	ror	r24
 32a:	2a 95       	dec	r18
 32c:	e2 f7       	brpl	.-8      	; 0x326 <SevenSeg_WriteValueToSegment+0x2a>
 32e:	80 ff       	sbrs	r24, 0
 330:	06 c0       	rjmp	.+12     	; 0x33e <SevenSeg_WriteValueToSegment+0x42>
				GPIO_PIN_WRITE(PORT_B, 0, SET);
 332:	41 e0       	ldi	r20, 0x01	; 1
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 c5 00 	call	0x18a	; 0x18a <GPIO_PIN_WRITE>
 33c:	05 c0       	rjmp	.+10     	; 0x348 <SevenSeg_WriteValueToSegment+0x4c>
			}
			else {
				GPIO_PIN_WRITE(PORT_B, 0, RESET);
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	0e 94 c5 00 	call	0x18a	; 0x18a <GPIO_PIN_WRITE>
			}

			GPIO_PIN_WRITE(PORT_D, CLK_PIN, SET);
 348:	41 e0       	ldi	r20, 0x01	; 1
 34a:	67 e0       	ldi	r22, 0x07	; 7
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	0e 94 c5 00 	call	0x18a	; 0x18a <GPIO_PIN_WRITE>
			GPIO_PIN_WRITE(PORT_D, CLK_PIN, RESET);
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	67 e0       	ldi	r22, 0x07	; 7
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	0e 94 c5 00 	call	0x18a	; 0x18a <GPIO_PIN_WRITE>
{
	for (char Segment = 0 ; Segment < NUM_SEG; Segment ++){
		GPIO_PIN_WRITE(PORT_D, LATCH_PIN, RESET);


		for (uint8_t i = 0; i < 8; i++) {
 35c:	1f 5f       	subi	r17, 0xFF	; 255
 35e:	18 30       	cpi	r17, 0x08	; 8
 360:	d8 f2       	brcs	.-74     	; 0x318 <SevenSeg_WriteValueToSegment+0x1c>
 362:	10 e0       	ldi	r17, 0x00	; 0
 364:	27 c0       	rjmp	.+78     	; 0x3b4 <SevenSeg_WriteValueToSegment+0xb8>
			GPIO_PIN_WRITE(PORT_D, CLK_PIN, SET);
			GPIO_PIN_WRITE(PORT_D, CLK_PIN, RESET);
		}

		for (uint8_t i = 0; i < 8; i++) {
			if (SEGMENT_SELECT[Segment] & (1 << (7 - i))) {
 366:	e0 2f       	mov	r30, r16
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	ec 5d       	subi	r30, 0xDC	; 220
 36c:	fe 4f       	sbci	r31, 0xFE	; 254
 36e:	80 81       	ld	r24, Z
 370:	27 e0       	ldi	r18, 0x07	; 7
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	21 1b       	sub	r18, r17
 376:	31 09       	sbc	r19, r1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <SevenSeg_WriteValueToSegment+0x84>
 37c:	95 95       	asr	r25
 37e:	87 95       	ror	r24
 380:	2a 95       	dec	r18
 382:	e2 f7       	brpl	.-8      	; 0x37c <SevenSeg_WriteValueToSegment+0x80>
 384:	80 ff       	sbrs	r24, 0
 386:	06 c0       	rjmp	.+12     	; 0x394 <SevenSeg_WriteValueToSegment+0x98>
				GPIO_PIN_WRITE(PORT_B, 0, SET);
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 c5 00 	call	0x18a	; 0x18a <GPIO_PIN_WRITE>
 392:	05 c0       	rjmp	.+10     	; 0x39e <SevenSeg_WriteValueToSegment+0xa2>
			} 
			else {
				GPIO_PIN_WRITE(PORT_B, 0, RESET);
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	0e 94 c5 00 	call	0x18a	; 0x18a <GPIO_PIN_WRITE>
			}

			GPIO_PIN_WRITE(PORT_D, CLK_PIN, SET);
 39e:	41 e0       	ldi	r20, 0x01	; 1
 3a0:	67 e0       	ldi	r22, 0x07	; 7
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	0e 94 c5 00 	call	0x18a	; 0x18a <GPIO_PIN_WRITE>
			GPIO_PIN_WRITE(PORT_D, CLK_PIN, RESET);
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	67 e0       	ldi	r22, 0x07	; 7
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	0e 94 c5 00 	call	0x18a	; 0x18a <GPIO_PIN_WRITE>

			GPIO_PIN_WRITE(PORT_D, CLK_PIN, SET);
			GPIO_PIN_WRITE(PORT_D, CLK_PIN, RESET);
		}

		for (uint8_t i = 0; i < 8; i++) {
 3b2:	1f 5f       	subi	r17, 0xFF	; 255
 3b4:	18 30       	cpi	r17, 0x08	; 8
 3b6:	b8 f2       	brcs	.-82     	; 0x366 <SevenSeg_WriteValueToSegment+0x6a>

			GPIO_PIN_WRITE(PORT_D, CLK_PIN, SET);
			GPIO_PIN_WRITE(PORT_D, CLK_PIN, RESET);
		}

		GPIO_PIN_WRITE(PORT_D, LATCH_PIN, SET);
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	64 e0       	ldi	r22, 0x04	; 4
 3bc:	82 e0       	ldi	r24, 0x02	; 2
 3be:	0e 94 c5 00 	call	0x18a	; 0x18a <GPIO_PIN_WRITE>
 3c2:	87 e8       	ldi	r24, 0x87	; 135
 3c4:	93 e1       	ldi	r25, 0x13	; 19
 3c6:	01 97       	sbiw	r24, 0x01	; 1
 3c8:	f1 f7       	brne	.-4      	; 0x3c6 <SevenSeg_WriteValueToSegment+0xca>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <SevenSeg_WriteValueToSegment+0xd0>
 3cc:	00 00       	nop
		_delay_ms(20);
		ptr_display_values++;
 3ce:	21 96       	adiw	r28, 0x01	; 1


/* Write a value to one of the 4 digits of the display */
void SevenSeg_WriteValueToSegment(char* ptr_display_values)
{
	for (char Segment = 0 ; Segment < NUM_SEG; Segment ++){
 3d0:	0f 5f       	subi	r16, 0xFF	; 255
 3d2:	04 30       	cpi	r16, 0x04	; 4
 3d4:	08 f4       	brcc	.+2      	; 0x3d8 <SevenSeg_WriteValueToSegment+0xdc>
 3d6:	99 cf       	rjmp	.-206    	; 0x30a <SevenSeg_WriteValueToSegment+0xe>

		GPIO_PIN_WRITE(PORT_D, LATCH_PIN, SET);
		_delay_ms(20);
		ptr_display_values++;
	}
}
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	1f 91       	pop	r17
 3de:	0f 91       	pop	r16
 3e0:	08 95       	ret

000003e2 <Display__Initialize>:
/**
 *  Inicializa vari?veis referente ao estado inicial do forno e das chaves
 */
void Display__Initialize(void)
	{
	Oven_Display_State = OVEN_INIT;
 3e2:	84 e0       	ldi	r24, 0x04	; 4
 3e4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <Oven_Display_State>
	Display_Keys_Map = KEY_OFF_EVENT;
 3e8:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <Display_Keys_Map>
 3ec:	08 95       	ret

000003ee <Display__SetState>:
 *  A funcao atualiza a variavel global:
 *  Oven_Display_State que indica o estado do forno  
 */
void Display__SetState(OVEN_DISPLAY_STATE_TYPE state)
{
	if(state < NUM_OF_OVEN_STATES)
 3ee:	86 30       	cpi	r24, 0x06	; 6
 3f0:	10 f4       	brcc	.+4      	; 0x3f6 <Display__SetState+0x8>
	{
		Oven_Display_State = state;
 3f2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <Oven_Display_State>
 3f6:	08 95       	ret

000003f8 <UpdateDisplayLeds>:
     tipo Hal__SetLed() 
 */
void UpdateDisplayLeds(void)
{
	
	switch(Oven_Display_State)
 3f8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Oven_Display_State>
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	51 f0       	breq	.+20     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 400:	28 f0       	brcs	.+10     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 402:	82 30       	cpi	r24, 0x02	; 2
 404:	a1 f0       	breq	.+40     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 406:	83 30       	cpi	r24, 0x03	; 3
 408:	f9 f0       	breq	.+62     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 40a:	08 95       	ret
	{
	case OVEN_OFF:
	{
	       Hal__SetAllLeds(APAGA_LED);
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	0e 94 38 01 	call	0x270	; 0x270 <Hal__SetAllLeds>
		   break;
 412:	08 95       	ret
	   		
		break;

	case OVEN_MIN:
	{
		Hal__SetLed(LED_0, ACENDE_LED);
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	0e 94 2c 01 	call	0x258	; 0x258 <Hal__SetLed>
		Hal__SetLed(LED_1, APAGA_LED);
 41c:	61 e0       	ldi	r22, 0x01	; 1
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	0e 94 2c 01 	call	0x258	; 0x258 <Hal__SetLed>
		Hal__SetLed(LED_2, APAGA_LED);
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	82 e0       	ldi	r24, 0x02	; 2
 428:	0e 94 2c 01 	call	0x258	; 0x258 <Hal__SetLed>
		break;
 42c:	08 95       	ret
	}
	case OVEN_MED:
	{
		Hal__SetLed(LED_0, ACENDE_LED);
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	0e 94 2c 01 	call	0x258	; 0x258 <Hal__SetLed>
		Hal__SetLed(LED_1, ACENDE_LED);
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	0e 94 2c 01 	call	0x258	; 0x258 <Hal__SetLed>
		Hal__SetLed(LED_2, APAGA_LED);
 43e:	61 e0       	ldi	r22, 0x01	; 1
 440:	82 e0       	ldi	r24, 0x02	; 2
 442:	0e 94 2c 01 	call	0x258	; 0x258 <Hal__SetLed>
		break;
 446:	08 95       	ret
	}
	case OVEN_MAX:
	{
		Hal__SetLed(LED_0, ACENDE_LED);
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	0e 94 2c 01 	call	0x258	; 0x258 <Hal__SetLed>
		Hal__SetLed(LED_1, ACENDE_LED);
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	0e 94 2c 01 	call	0x258	; 0x258 <Hal__SetLed>
		Hal__SetLed(LED_2, ACENDE_LED);
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	82 e0       	ldi	r24, 0x02	; 2
 45c:	0e 94 2c 01 	call	0x258	; 0x258 <Hal__SetLed>
 460:	08 95       	ret

00000462 <ReadDisplayKeys>:
 *  Atualiza a variavel global (Display_Keys_Map) das chaves
 *  chamando Hal_ReadKey()
 */
void ReadDisplayKeys(void)
{	
	KEYS_READ* keys= Hal__ReadAllKey(); // Lê todas as chaves
 462:	0e 94 4e 01 	call	0x29c	; 0x29c <Hal__ReadAllKey>
 466:	fc 01       	movw	r30, r24
	
	if (keys->key[KEY_0] == SW_ON &&  keys->key[KEY_2] == SW_ON){ // Forno desligado
 468:	80 81       	ld	r24, Z
 46a:	81 11       	cpse	r24, r1
 46c:	06 c0       	rjmp	.+12     	; 0x47a <ReadDisplayKeys+0x18>
 46e:	92 81       	ldd	r25, Z+2	; 0x02
 470:	91 11       	cpse	r25, r1
 472:	03 c0       	rjmp	.+6      	; 0x47a <ReadDisplayKeys+0x18>
		Display_Keys_Map = KEY_OFF_EVENT;
 474:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <Display_Keys_Map>
 478:	08 95       	ret
	}
	else{
		if (keys->key[KEY_0] == SW_ON ){ // Forno no minimo
 47a:	81 11       	cpse	r24, r1
 47c:	03 c0       	rjmp	.+6      	; 0x484 <ReadDisplayKeys+0x22>
			Display_Keys_Map = KEY_MIN_EVENT;	
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <Display_Keys_Map>
		}
		if (keys->key[KEY_2] == SW_ON){ // Forno no máximo
 484:	82 81       	ldd	r24, Z+2	; 0x02
 486:	81 11       	cpse	r24, r1
 488:	03 c0       	rjmp	.+6      	; 0x490 <ReadDisplayKeys+0x2e>
			Display_Keys_Map  = KEY_MAX_EVENT;
 48a:	83 e0       	ldi	r24, 0x03	; 3
 48c:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <Display_Keys_Map>
		}
		if (keys->key[KEY_1] == SW_ON){ // Forno no médio
 490:	81 81       	ldd	r24, Z+1	; 0x01
 492:	81 11       	cpse	r24, r1
 494:	03 c0       	rjmp	.+6      	; 0x49c <ReadDisplayKeys+0x3a>
			Display_Keys_Map  = KEY_MED_EVENT;
 496:	82 e0       	ldi	r24, 0x02	; 2
 498:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <Display_Keys_Map>
 49c:	08 95       	ret

0000049e <Display__GetEvent>:


KEY_EVENT_TYPE Display__GetEvent(void)
{
	KEY_EVENT_TYPE event;
	ReadDisplayKeys();    // L? as chaves e coloca valor na vari?vel global Display_Keys_Map
 49e:	0e 94 31 02 	call	0x462	; 0x462 <ReadDisplayKeys>
	event = Display_Keys_Map;  //atribui a event o global atualizada em ReadDisplayKeys()
	return (event);
}
 4a2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <Display_Keys_Map>
 4a6:	08 95       	ret

000004a8 <UpdateDisplaySevenSeg>:


void UpdateDisplaySevenSeg(void)
{
	char* ptr_display_values = &ZERADO_DIGITO[0]; // Inicializa o ponteiro 
	switch(Oven_Display_State)
 4a8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Oven_Display_State>
 4ac:	82 30       	cpi	r24, 0x02	; 2
 4ae:	39 f0       	breq	.+14     	; 0x4be <UpdateDisplaySevenSeg+0x16>
 4b0:	83 30       	cpi	r24, 0x03	; 3
 4b2:	41 f0       	breq	.+16     	; 0x4c4 <UpdateDisplaySevenSeg+0x1c>
 4b4:	81 30       	cpi	r24, 0x01	; 1
 4b6:	49 f0       	breq	.+18     	; 0x4ca <UpdateDisplaySevenSeg+0x22>



void UpdateDisplaySevenSeg(void)
{
	char* ptr_display_values = &ZERADO_DIGITO[0]; // Inicializa o ponteiro 
 4b8:	84 e3       	ldi	r24, 0x34	; 52
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	08 c0       	rjmp	.+16     	; 0x4ce <UpdateDisplaySevenSeg+0x26>
		case OVEN_MIN:
			ptr_display_values = &MINIMO_DIGITO[0];
			break;
		case OVEN_MED:
			{
			ptr_display_values = &MEDIO_DIGITO[0];
 4be:	8c e2       	ldi	r24, 0x2C	; 44
 4c0:	91 e0       	ldi	r25, 0x01	; 1
			break;
 4c2:	05 c0       	rjmp	.+10     	; 0x4ce <UpdateDisplaySevenSeg+0x26>
			}
		case OVEN_MAX:
			{
			ptr_display_values = &MAXIMO_DIGITO[0];
 4c4:	88 e2       	ldi	r24, 0x28	; 40
 4c6:	91 e0       	ldi	r25, 0x01	; 1
			break;
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <UpdateDisplaySevenSeg+0x26>
			break;
		case OVEN_INIT:
		case OVEN_TIMEOUT:
			break;
		case OVEN_MIN:
			ptr_display_values = &MINIMO_DIGITO[0];
 4ca:	80 e3       	ldi	r24, 0x30	; 48
 4cc:	91 e0       	ldi	r25, 0x01	; 1
		default:
			{
			break;
			}
	   }
		Hal__WriteValtoSegment(ptr_display_values);
 4ce:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Hal__WriteValtoSegment>
 4d2:	08 95       	ret

000004d4 <Display__Handler>:
 *   Atualiza o display(leds) do estado do forno em fun??o da leitura das chaves
 */
void Display__Handler(void)
{
	#if (LED_DISPLAY == ENABLED)	
	   UpdateDisplayLeds();        // atualiza??o dos leds
 4d4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <UpdateDisplayLeds>
	#endif	                       // fun??o privada!
	#if (SEVEN_SEG_DISPLAY == ENABLED)
		UpdateDisplaySevenSeg();
 4d8:	0e 94 54 02 	call	0x4a8	; 0x4a8 <UpdateDisplaySevenSeg>
 4dc:	08 95       	ret

000004de <_exit>:
 4de:	f8 94       	cli

000004e0 <__stop_program>:
 4e0:	ff cf       	rjmp	.-2      	; 0x4e0 <__stop_program>
