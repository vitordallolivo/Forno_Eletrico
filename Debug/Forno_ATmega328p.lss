
Forno_ATmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000003ac  00000440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800124  00800124  00000464  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013e3  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bd4  00000000  00000000  000019bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ad  00000000  00000000  00002593  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00002d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000084b  00000000  00000000  00002ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a0  00000000  00000000  00003733  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003ad3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 75 00 	call	0xea	; 0xea <main>
  9e:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Appl__Initialize>:
//-------------------------------------- Public Functions -------------------------------------------------------------
//=====================================================================================================================


void Appl__Initialize(void){
	User_Action = EVENTS_NO_EVENT;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
  ac:	08 95       	ret

000000ae <Appl__Handler>:
}


void Appl__Handler(void)
{
	User_Action = Display__GetEvent(); 
  ae:	0e 94 cf 01 	call	0x39e	; 0x39e <Display__GetEvent>
  b2:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
	if (User_Action != EVENTS_NO_EVENT)
  b6:	8f 3f       	cpi	r24, 0xFF	; 255
  b8:	b9 f0       	breq	.+46     	; 0xe8 <Appl__Handler+0x3a>
	{
		switch(User_Action)
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	51 f0       	breq	.+20     	; 0xd2 <Appl__Handler+0x24>
  be:	28 f0       	brcs	.+10     	; 0xca <Appl__Handler+0x1c>
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	59 f0       	breq	.+22     	; 0xda <Appl__Handler+0x2c>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	69 f0       	breq	.+26     	; 0xe2 <Appl__Handler+0x34>
  c8:	08 95       	ret
		{
			case KEY_OFF_EVENT:
			Display__SetState(OVEN_OFF);
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	0e 94 72 01 	call	0x2e4	; 0x2e4 <Display__SetState>
			break;
  d0:	08 95       	ret
			
			case KEY_MIN_EVENT:
			Display__SetState(OVEN_MIN);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <Display__SetState>
			break;
  d8:	08 95       	ret
			
			case KEY_MED_EVENT:
			Display__SetState(OVEN_MED);
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	0e 94 72 01 	call	0x2e4	; 0x2e4 <Display__SetState>
			break;
  e0:	08 95       	ret
			
			case KEY_MAX_EVENT:
			Display__SetState(OVEN_MAX);
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <Display__SetState>
  e8:	08 95       	ret

000000ea <main>:
//=====================================================================================================================

void main(void)
{
	
	Slot = SLOT_1;
  ea:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <Slot>
	
	// Functions Initialization
	INITIALIZE_TASKS();
  ee:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Hal__Initialize>
  f2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Display__Initialize>
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <Appl__Initialize>
	
	//Main Loop
	for(;;)
	{
		
		switch(Slot)
  fa:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Slot>
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	39 f0       	breq	.+14     	; 0x110 <main+0x26>
 102:	18 f0       	brcs	.+6      	; 0x10a <main+0x20>
 104:	85 30       	cpi	r24, 0x05	; 5
 106:	38 f4       	brcc	.+14     	; 0x116 <main+0x2c>
 108:	08 c0       	rjmp	.+16     	; 0x11a <main+0x30>
		{
			case SLOT_1:
			SLOT_1_TASKS();
 10a:	0e 94 57 00 	call	0xae	; 0xae <Appl__Handler>
			break;
 10e:	05 c0       	rjmp	.+10     	; 0x11a <main+0x30>

			case SLOT_2:
			SLOT_2_TASKS();
 110:	0e 94 ca 01 	call	0x394	; 0x394 <Display__Handler>
			break;
 114:	02 c0       	rjmp	.+4      	; 0x11a <main+0x30>
			case SLOT_5:
			SLOT_5_TASKS();
			break;

			default:
			Slot = SLOT_1;
 116:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <Slot>
			break;

		}

		Slot++;
 11a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Slot>
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Slot>
		if(Slot >= NUM_OF_MAIN_SLOTS)
 124:	85 30       	cpi	r24, 0x05	; 5
 126:	48 f3       	brcs	.-46     	; 0xfa <main+0x10>
		{
			Slot = SLOT_1;
 128:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <Slot>
 12c:	e6 cf       	rjmp	.-52     	; 0xfa <main+0x10>

0000012e <GPIO_CONFIG>:
void GPIO_PIN_TOGGLE(GPIO_PORT port, unsigned char pin){
	volatile GPIO_DATA_TYPE *pt_data;
	pt_data = GPIO_DATA_LIST[port];
	
	// Se pegar o set_mask é fazer XOR com o pino que você quer, ex: 0b11111111 xor 0x1 = 0b11111110
	pt_data->DATA_OUT_PULL_REG.byte ^= GPIO_PIN_SET_MASK[pin];
 12e:	83 30       	cpi	r24, 0x03	; 3
 130:	58 f5       	brcc	.+86     	; 0x188 <GPIO_CONFIG+0x5a>
 132:	68 30       	cpi	r22, 0x08	; 8
 134:	48 f5       	brcc	.+82     	; 0x188 <GPIO_CONFIG+0x5a>
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	fb 01       	movw	r30, r22
 13a:	e4 5e       	subi	r30, 0xE4	; 228
 13c:	fe 4f       	sbci	r31, 0xFE	; 254
 13e:	20 81       	ld	r18, Z
 140:	fb 01       	movw	r30, r22
 142:	ec 5e       	subi	r30, 0xEC	; 236
 144:	fe 4f       	sbci	r31, 0xFE	; 254
 146:	90 81       	ld	r25, Z
 148:	e8 2f       	mov	r30, r24
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	ee 0f       	add	r30, r30
 14e:	ff 1f       	adc	r31, r31
 150:	e0 50       	subi	r30, 0x00	; 0
 152:	ff 4f       	sbci	r31, 0xFF	; 255
 154:	01 90       	ld	r0, Z+
 156:	f0 81       	ld	r31, Z
 158:	e0 2d       	mov	r30, r0
 15a:	41 30       	cpi	r20, 0x01	; 1
 15c:	59 f0       	breq	.+22     	; 0x174 <GPIO_CONFIG+0x46>
 15e:	18 f0       	brcs	.+6      	; 0x166 <GPIO_CONFIG+0x38>
 160:	42 30       	cpi	r20, 0x02	; 2
 162:	79 f0       	breq	.+30     	; 0x182 <GPIO_CONFIG+0x54>
 164:	08 95       	ret
 166:	81 81       	ldd	r24, Z+1	; 0x01
 168:	98 23       	and	r25, r24
 16a:	91 83       	std	Z+1, r25	; 0x01
 16c:	82 81       	ldd	r24, Z+2	; 0x02
 16e:	28 2b       	or	r18, r24
 170:	22 83       	std	Z+2, r18	; 0x02
 172:	08 95       	ret
 174:	81 81       	ldd	r24, Z+1	; 0x01
 176:	89 23       	and	r24, r25
 178:	81 83       	std	Z+1, r24	; 0x01
 17a:	82 81       	ldd	r24, Z+2	; 0x02
 17c:	98 23       	and	r25, r24
 17e:	92 83       	std	Z+2, r25	; 0x02
 180:	08 95       	ret
 182:	81 81       	ldd	r24, Z+1	; 0x01
 184:	28 2b       	or	r18, r24
 186:	21 83       	std	Z+1, r18	; 0x01
 188:	08 95       	ret

0000018a <GPIO_PIN_WRITE>:
 18a:	e8 2f       	mov	r30, r24
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	ee 0f       	add	r30, r30
 190:	ff 1f       	adc	r31, r31
 192:	e0 50       	subi	r30, 0x00	; 0
 194:	ff 4f       	sbci	r31, 0xFF	; 255
 196:	a0 81       	ld	r26, Z
 198:	b1 81       	ldd	r27, Z+1	; 0x01
 19a:	41 30       	cpi	r20, 0x01	; 1
 19c:	61 f4       	brne	.+24     	; 0x1b6 <GPIO_PIN_WRITE+0x2c>
 19e:	12 96       	adiw	r26, 0x02	; 2
 1a0:	9c 91       	ld	r25, X
 1a2:	12 97       	sbiw	r26, 0x02	; 2
 1a4:	e6 2f       	mov	r30, r22
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	e4 5e       	subi	r30, 0xE4	; 228
 1aa:	fe 4f       	sbci	r31, 0xFE	; 254
 1ac:	80 81       	ld	r24, Z
 1ae:	89 2b       	or	r24, r25
 1b0:	12 96       	adiw	r26, 0x02	; 2
 1b2:	8c 93       	st	X, r24
 1b4:	08 95       	ret
 1b6:	12 96       	adiw	r26, 0x02	; 2
 1b8:	9c 91       	ld	r25, X
 1ba:	12 97       	sbiw	r26, 0x02	; 2
 1bc:	e6 2f       	mov	r30, r22
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ec 5e       	subi	r30, 0xEC	; 236
 1c2:	fe 4f       	sbci	r31, 0xFE	; 254
 1c4:	80 81       	ld	r24, Z
 1c6:	89 23       	and	r24, r25
 1c8:	12 96       	adiw	r26, 0x02	; 2
 1ca:	8c 93       	st	X, r24
 1cc:	08 95       	ret

000001ce <GPIO_PIN_READ>:
}

unsigned char GPIO_PIN_READ(GPIO_PORT port, unsigned char pin){
	volatile GPIO_DATA_TYPE *pt_data;
	pt_data = GPIO_DATA_LIST[port];
 1ce:	e8 2f       	mov	r30, r24
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	ee 0f       	add	r30, r30
 1d4:	ff 1f       	adc	r31, r31
 1d6:	e0 50       	subi	r30, 0x00	; 0
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	01 90       	ld	r0, Z+
 1dc:	f0 81       	ld	r31, Z
 1de:	e0 2d       	mov	r30, r0
	// AND dos dados de PINx com o pin_set_mask
	if(pt_data->DATA_IN_REG.byte & GPIO_PIN_SET_MASK[pin]){
 1e0:	90 81       	ld	r25, Z
 1e2:	e6 2f       	mov	r30, r22
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	e4 5e       	subi	r30, 0xE4	; 228
 1e8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ea:	80 81       	ld	r24, Z
 1ec:	89 23       	and	r24, r25
 1ee:	09 f0       	breq	.+2      	; 0x1f2 <GPIO_PIN_READ+0x24>
		return SET;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
	}
	return RESET;
 1f2:	08 95       	ret

000001f4 <Hal__Initialize>:
unsigned char Hal__ReadKey(KEY_INPUT_TYPE key)
{
unsigned char value;
value = GPIO_PIN_READ(KEYS_GPIO[key].port, KEYS_GPIO[key].pin);
return (value);
}
 1f4:	cf 93       	push	r28
 1f6:	c0 e0       	ldi	r28, 0x00	; 0
 1f8:	0c c0       	rjmp	.+24     	; 0x212 <Hal__Initialize+0x1e>
 1fa:	ec 2f       	mov	r30, r28
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	e4 5f       	subi	r30, 0xF4	; 244
 204:	fe 4f       	sbci	r31, 0xFE	; 254
 206:	42 e0       	ldi	r20, 0x02	; 2
 208:	61 81       	ldd	r22, Z+1	; 0x01
 20a:	80 81       	ld	r24, Z
 20c:	0e 94 97 00 	call	0x12e	; 0x12e <GPIO_CONFIG>
 210:	cf 5f       	subi	r28, 0xFF	; 255
 212:	c4 30       	cpi	r28, 0x04	; 4
 214:	90 f3       	brcs	.-28     	; 0x1fa <Hal__Initialize+0x6>
 216:	c0 e0       	ldi	r28, 0x00	; 0
 218:	0c c0       	rjmp	.+24     	; 0x232 <Hal__Initialize+0x3e>
 21a:	ec 2f       	mov	r30, r28
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	ee 0f       	add	r30, r30
 220:	ff 1f       	adc	r31, r31
 222:	ea 5f       	subi	r30, 0xFA	; 250
 224:	fe 4f       	sbci	r31, 0xFE	; 254
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	61 81       	ldd	r22, Z+1	; 0x01
 22a:	80 81       	ld	r24, Z
 22c:	0e 94 97 00 	call	0x12e	; 0x12e <GPIO_CONFIG>
 230:	cf 5f       	subi	r28, 0xFF	; 255
 232:	c3 30       	cpi	r28, 0x03	; 3
 234:	90 f3       	brcs	.-28     	; 0x21a <Hal__Initialize+0x26>
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <Hal__SetLed>:
 23a:	46 2f       	mov	r20, r22
 23c:	e8 2f       	mov	r30, r24
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	ee 0f       	add	r30, r30
 242:	ff 1f       	adc	r31, r31
 244:	e4 5f       	subi	r30, 0xF4	; 244
 246:	fe 4f       	sbci	r31, 0xFE	; 254
 248:	61 81       	ldd	r22, Z+1	; 0x01
 24a:	80 81       	ld	r24, Z
 24c:	0e 94 c5 00 	call	0x18a	; 0x18a <GPIO_PIN_WRITE>
 250:	08 95       	ret

00000252 <Hal__SetAllLeds>:
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	d8 2f       	mov	r29, r24
 258:	c0 e0       	ldi	r28, 0x00	; 0
 25a:	0c c0       	rjmp	.+24     	; 0x274 <Hal__SetAllLeds+0x22>
 25c:	ec 2f       	mov	r30, r28
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	ee 0f       	add	r30, r30
 262:	ff 1f       	adc	r31, r31
 264:	e4 5f       	subi	r30, 0xF4	; 244
 266:	fe 4f       	sbci	r31, 0xFE	; 254
 268:	4d 2f       	mov	r20, r29
 26a:	61 81       	ldd	r22, Z+1	; 0x01
 26c:	80 81       	ld	r24, Z
 26e:	0e 94 c5 00 	call	0x18a	; 0x18a <GPIO_PIN_WRITE>
 272:	cf 5f       	subi	r28, 0xFF	; 255
 274:	c4 30       	cpi	r28, 0x04	; 4
 276:	90 f3       	brcs	.-28     	; 0x25c <Hal__SetAllLeds+0xa>
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <Hal__ReadAllKey>:
 *  Use this function to read the status of all keys
 *  *  return: retorno o ponteiro da estrutura com os vetores das chaves*/


KEYS_READ* Hal__ReadAllKey(void)
{
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
	KEY_INPUT_TYPE index;
	for (index = 0; index < NUM_OF_KEYS; index++)
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	07 c0       	rjmp	.+14     	; 0x296 <Hal__ReadAllKey+0x18>
		tab.key[index] = 0xff;
 288:	e8 2f       	mov	r30, r24
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	e7 5d       	subi	r30, 0xD7	; 215
 28e:	fe 4f       	sbci	r31, 0xFE	; 254
 290:	9f ef       	ldi	r25, 0xFF	; 255
 292:	90 83       	st	Z, r25


KEYS_READ* Hal__ReadAllKey(void)
{
	KEY_INPUT_TYPE index;
	for (index = 0; index < NUM_OF_KEYS; index++)
 294:	8f 5f       	subi	r24, 0xFF	; 255
 296:	83 30       	cpi	r24, 0x03	; 3
 298:	b8 f3       	brcs	.-18     	; 0x288 <Hal__ReadAllKey+0xa>
 29a:	10 e0       	ldi	r17, 0x00	; 0
 29c:	15 c0       	rjmp	.+42     	; 0x2c8 <Hal__ReadAllKey+0x4a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29e:	87 ea       	ldi	r24, 0xA7	; 167
 2a0:	91 e6       	ldi	r25, 0x61	; 97
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <Hal__ReadAllKey+0x24>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <Hal__ReadAllKey+0x2a>
 2a8:	00 00       	nop
		tab.key[index] = 0xff;
		
	
	for (index = 0; index < NUM_OF_KEYS; index++){
			_delay_ms(100);
			tab.key[index] = GPIO_PIN_READ(KEYS_GPIO[index].port, KEYS_GPIO[index].pin);
 2aa:	c1 2f       	mov	r28, r17
 2ac:	d0 e0       	ldi	r29, 0x00	; 0
 2ae:	fe 01       	movw	r30, r28
 2b0:	ee 0f       	add	r30, r30
 2b2:	ff 1f       	adc	r31, r31
 2b4:	ea 5f       	subi	r30, 0xFA	; 250
 2b6:	fe 4f       	sbci	r31, 0xFE	; 254
 2b8:	61 81       	ldd	r22, Z+1	; 0x01
 2ba:	80 81       	ld	r24, Z
 2bc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GPIO_PIN_READ>
 2c0:	c7 5d       	subi	r28, 0xD7	; 215
 2c2:	de 4f       	sbci	r29, 0xFE	; 254
 2c4:	88 83       	st	Y, r24
	KEY_INPUT_TYPE index;
	for (index = 0; index < NUM_OF_KEYS; index++)
		tab.key[index] = 0xff;
		
	
	for (index = 0; index < NUM_OF_KEYS; index++){
 2c6:	1f 5f       	subi	r17, 0xFF	; 255
 2c8:	13 30       	cpi	r17, 0x03	; 3
 2ca:	48 f3       	brcs	.-46     	; 0x29e <Hal__ReadAllKey+0x20>
			_delay_ms(100);
			tab.key[index] = GPIO_PIN_READ(KEYS_GPIO[index].port, KEYS_GPIO[index].pin);
	}
	return (&tab);
 2cc:	89 e2       	ldi	r24, 0x29	; 41
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	1f 91       	pop	r17
 2d6:	08 95       	ret

000002d8 <Display__Initialize>:
/**
 *  Inicializa vari?veis referente ao estado inicial do forno e das chaves
 */
void Display__Initialize(void)
	{
	Oven_Display_State = OVEN_INIT;
 2d8:	84 e0       	ldi	r24, 0x04	; 4
 2da:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <Oven_Display_State>
	Display_Keys_Map = KEY_OFF_EVENT;
 2de:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <Display_Keys_Map>
 2e2:	08 95       	ret

000002e4 <Display__SetState>:
 *  A funcao atualiza a variavel global:
 *  Oven_Display_State que indica o estado do forno  
 */
void Display__SetState(OVEN_DISPLAY_STATE_TYPE state)
{
	if(state < NUM_OF_OVEN_STATES)
 2e4:	86 30       	cpi	r24, 0x06	; 6
 2e6:	10 f4       	brcc	.+4      	; 0x2ec <Display__SetState+0x8>
	{
		Oven_Display_State = state;
 2e8:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <Oven_Display_State>
 2ec:	08 95       	ret

000002ee <UpdateDisplayLeds>:
     tipo Hal__SetLed() 
 */
void UpdateDisplayLeds(void)
{
	
	switch(Oven_Display_State)
 2ee:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <Oven_Display_State>
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	51 f0       	breq	.+20     	; 0x30a <UpdateDisplayLeds+0x1c>
 2f6:	28 f0       	brcs	.+10     	; 0x302 <UpdateDisplayLeds+0x14>
 2f8:	82 30       	cpi	r24, 0x02	; 2
 2fa:	a1 f0       	breq	.+40     	; 0x324 <UpdateDisplayLeds+0x36>
 2fc:	83 30       	cpi	r24, 0x03	; 3
 2fe:	f9 f0       	breq	.+62     	; 0x33e <UpdateDisplayLeds+0x50>
 300:	08 95       	ret
	{
	case OVEN_OFF:
	{
	       Hal__SetAllLeds(APAGA_LED);
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 29 01 	call	0x252	; 0x252 <Hal__SetAllLeds>
		   break;
 308:	08 95       	ret
	   		
		break;

	case OVEN_MIN:
	{
		Hal__SetLed(LED_0, ACENDE_LED);
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 1d 01 	call	0x23a	; 0x23a <Hal__SetLed>
		Hal__SetLed(LED_1, APAGA_LED);
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 1d 01 	call	0x23a	; 0x23a <Hal__SetLed>
		Hal__SetLed(LED_2, APAGA_LED);
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	0e 94 1d 01 	call	0x23a	; 0x23a <Hal__SetLed>
		break;
 322:	08 95       	ret
	}
	case OVEN_MED:
	{
		Hal__SetLed(LED_0, ACENDE_LED);
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 1d 01 	call	0x23a	; 0x23a <Hal__SetLed>
		Hal__SetLed(LED_1, ACENDE_LED);
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 1d 01 	call	0x23a	; 0x23a <Hal__SetLed>
		Hal__SetLed(LED_2, APAGA_LED);
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	0e 94 1d 01 	call	0x23a	; 0x23a <Hal__SetLed>
		break;
 33c:	08 95       	ret
	}
	case OVEN_MAX:
	{
		Hal__SetLed(LED_0, ACENDE_LED);
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	0e 94 1d 01 	call	0x23a	; 0x23a <Hal__SetLed>
		Hal__SetLed(LED_1, ACENDE_LED);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	0e 94 1d 01 	call	0x23a	; 0x23a <Hal__SetLed>
		Hal__SetLed(LED_2, ACENDE_LED);
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	0e 94 1d 01 	call	0x23a	; 0x23a <Hal__SetLed>
 356:	08 95       	ret

00000358 <ReadDisplayKeys>:
 *  Atualiza a variavel global (Display_Keys_Map) das chaves
 *  chamando Hal_ReadKey()
 */
void ReadDisplayKeys(void)
{	
	KEYS_READ* keys= Hal__ReadAllKey(); // Lê todas as chaves
 358:	0e 94 3f 01 	call	0x27e	; 0x27e <Hal__ReadAllKey>
 35c:	fc 01       	movw	r30, r24
	
	if (keys->key[KEY_0] == SW_ON &&  keys->key[KEY_2] == SW_ON){ // Forno desligado
 35e:	80 81       	ld	r24, Z
 360:	81 11       	cpse	r24, r1
 362:	06 c0       	rjmp	.+12     	; 0x370 <ReadDisplayKeys+0x18>
 364:	92 81       	ldd	r25, Z+2	; 0x02
 366:	91 11       	cpse	r25, r1
 368:	03 c0       	rjmp	.+6      	; 0x370 <ReadDisplayKeys+0x18>
		Display_Keys_Map = KEY_OFF_EVENT;
 36a:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <Display_Keys_Map>
 36e:	08 95       	ret
	}
	else{
		if (keys->key[KEY_0] == SW_ON ){ // Forno no minimo
 370:	81 11       	cpse	r24, r1
 372:	03 c0       	rjmp	.+6      	; 0x37a <ReadDisplayKeys+0x22>
			Display_Keys_Map = KEY_MIN_EVENT;	
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <Display_Keys_Map>
		}
		if (keys->key[KEY_2] == SW_ON){ // Forno no máximo
 37a:	82 81       	ldd	r24, Z+2	; 0x02
 37c:	81 11       	cpse	r24, r1
 37e:	03 c0       	rjmp	.+6      	; 0x386 <ReadDisplayKeys+0x2e>
			Display_Keys_Map  = KEY_MAX_EVENT;
 380:	83 e0       	ldi	r24, 0x03	; 3
 382:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <Display_Keys_Map>
		}
		if (keys->key[KEY_1] == SW_ON){ // Forno no médio
 386:	81 81       	ldd	r24, Z+1	; 0x01
 388:	81 11       	cpse	r24, r1
 38a:	03 c0       	rjmp	.+6      	; 0x392 <ReadDisplayKeys+0x3a>
			Display_Keys_Map  = KEY_MED_EVENT;
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <Display_Keys_Map>
 392:	08 95       	ret

00000394 <Display__Handler>:
/**
 *   Atualiza o display(leds) do estado do forno em fun??o da leitura das chaves
 */
void Display__Handler(void)
	{
	ReadDisplayKeys();          // l? os Keys! Escrever essa parte!
 394:	0e 94 ac 01 	call	0x358	; 0x358 <ReadDisplayKeys>
	                            // fun??o privada!
	#if (LED_DISPLAY == ENABLED)	
	   UpdateDisplayLeds();        // atualiza??o dos leds
 398:	0e 94 77 01 	call	0x2ee	; 0x2ee <UpdateDisplayLeds>
 39c:	08 95       	ret

0000039e <Display__GetEvent>:


KEY_EVENT_TYPE Display__GetEvent(void)
{
	KEY_EVENT_TYPE event;
	ReadDisplayKeys();    // L? as chaves e coloca valor na vari?vel global Display_Keys_Map
 39e:	0e 94 ac 01 	call	0x358	; 0x358 <ReadDisplayKeys>
	event = Display_Keys_Map;  //atribui a event o global atualizada em ReadDisplayKeys()
	return (event);
}
 3a2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Display_Keys_Map>
 3a6:	08 95       	ret

000003a8 <_exit>:
 3a8:	f8 94       	cli

000003aa <__stop_program>:
 3aa:	ff cf       	rjmp	.-2      	; 0x3aa <__stop_program>
